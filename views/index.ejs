<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Threat Model Generator</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .card-columns {
      column-count: 3;
    }
    .sidebar {
      height: 100%;
      position: fixed;
      top: 0;
      left: 0;
      width: 200px;
      background-color: #f8f9fa;
      padding-top: 20px;
    }
    .sidebar a {
      padding: 15px;
      text-decoration: none;
      font-size: 18px;
      color: #333;
      display: block;
    }
    .sidebar a:hover {
      background-color: #ddd;
    }
    .modal-backdrop {
      z-index: 1050;
    }
    .modal-dialog {
      z-index: 1060;
    }
    .autocomplete-suggestions {
      position: absolute;
      z-index: 1000;
      background: white;
      border: 1px solid #ccc;
      max-height: 200px;
      overflow-y: auto;
      width: 100%;
    }
    .autocomplete-suggestion {
      padding: 10px;
      cursor: pointer;
    }
    .autocomplete-suggestion:hover {
      background-color: #f8f9fa;
    }
  </style>
</head>
<body>
  <% if (user) { %>
  <div class="sidebar">
    <a href="/">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M8 3.293l6 6V13.5a.5.5 0 0 1-.5.5H10v-2a2 2 0 1 0-4 0v2H2.5a.5.5 0 0 1-.5-.5V9.293l6-6zM7.293 2.5a1 1 0 0 1 1.414 0l6.364 6.364a1 1 0 0 1-.027 1.414l-1 1a1 1 0 0 1-1.414-.027L8 5.414 2.364 11.25a1 1 0 0 1-1.414.027l-1-1a1 1 0 0 1-.027-1.414L7.293 2.5z"/>
      </svg>
      Home
    </a>
    <a href="#" data-bs-toggle="modal" data-bs-target="#promptsModal">Prompts</a>
    <a href="#" data-bs-toggle="modal" data-bs-target="#reportModal">Report</a>
    <a href="#" data-bs-toggle="modal" data-bs-target="#userManagementModal">Users</a>
    <a href="/logout">Logout</a>
  </div>

  <div class="container mt-5" style="margin-left: 220px;">
    <h1 class="text-center mb-5">Threat Model Generator</h1>

    <!-- Form for submitting a new threat model -->
    <div class="card mb-4">
      <div class="card-body">
        <h5 class="card-title">Submit a New Threat Model</h5>
        <form id="threatModelForm" action="/ask" method="post" onsubmit="return handleFormSubmission(event)">
          <div class="mb-3">
            <label for="tm-prompt" class="form-label">TM Prompt</label>
            <input type="text" class="form-control" id="tm-prompt" name="tm-prompt" readonly>
          </div>
          <div class="mb-3">
            <label for="subject" class="form-label">Threat Model</label>
            <textarea class="form-control" id="subject" name="subject" rows="2" required></textarea>
          </div>
          <div class="mb-3">
            <label for="model" class="form-label">Select Model</label>
            <select class="form-select" id="model" name="model">
              <% models.forEach((model, index) => { %>
                <option value="<%= model %>"><%= model %></option>
              <% }) %>
            </select>
          </div>
          <div class="mb-3">
            <label for="apiKey" class="form-label">ChatGPT API Key</label>
            <input type="text" class="form-control" id="apiKey" name="apiKey" value="<%= user.apiKey || '' %>" required>
          </div>
          <input type="hidden" id="selectedPromptId" name="selectedPromptId">
          <button type="submit" class="btn btn-primary">Submit</button>
        </form>
      </div>
    </div>

    <!-- Modal for editing the prompt template -->
    <div class="modal fade" id="templateModal" tabindex="-1" aria-labelledby="templateModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="templateModalLabel">Edit Prompt</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="edit-template-form">
              <div class="mb-3">
                <label for="prompt-template" class="form-label">Prompt Template</label>
                <textarea class="form-control" id="prompt-template" rows="6"></textarea>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" onclick="saveTemplate('template')">Save changes</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal for managing users -->
    <div class="modal fade" id="userManagementModal" tabindex="-1" aria-labelledby="userManagementModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="userManagementModalLabel">User Management</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <ul id="userList" class="list-group">
              <!-- User list items will be injected here by fetchUsers -->
            </ul>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal for viewing and editing user details -->
    <div class="modal fade" id="userDetailsModal" tabindex="-1" aria-labelledby="userDetailsModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="userDetailsModalLabel">User Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="edit-user-form">
              <div class="mb-3">
                <label for="userName" class="form-label">Name</label>
                <input type="text" class="form-control" id="userName">
              </div>
              <div class="mb-3">
                <label for="userEmail" class="form-label">Email</label>
                <input type="email" class="form-control" id="userEmail" readonly>
              </div>
              <div class="mb-3">
                <label for="userRegistered" class="form-label">Registered</label>
                <input type="checkbox" class="form-check-input" id="userRegistered">
              </div>
              <div class="mb-3">
                <label for="userApiKey" class="form-label">ChatGPT API Key</label>
                <input type="text" class="form-control" id="userApiKey">
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-danger" onclick="confirmDeleteUser()">Delete</button>
            <button type="button" class="btn btn-primary" onclick="updateUser()">Update</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal for confirming user deletion -->
    <div class="modal fade" id="confirmDeleteUserModal" tabindex="-1" aria-labelledby="confirmDeleteUserModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="confirmDeleteUserModalLabel">Confirm Deletion</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p id="confirmDeleteMessage">Are you sure you want to delete this user?</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
            <button type="button" class="btn btn-danger" onclick="deleteUser()">Yes</button>
          </div>
        </div>
      </div>
    </div>

    <h1 class="text-center mb-5">Threat Models</h1>

    <!-- Search bar -->
    <div class="mb-4 position-relative">
      <input type="text" id="search-bar" class="form-control" placeholder="Search by title...">
      <div id="autocomplete-list" class="autocomplete-suggestions"></div>
    </div>

    <!-- Cards for each subject -->
    <div class="row">
      <% subjects.forEach((subjectObj) => { %>
        <div class="col-md-4 mb-4">
          <div class="card">
            <div class="card-body">
              <h5 class="card-title"><%= subjectObj.title %></h5>
              <a href="/results?subjectid=<%= encodeURIComponent(subjectObj.subjectid) %>" class="btn btn-primary">View</a>
              <button class="btn btn-danger" onclick="confirmDelete('<%= subjectObj.subjectid %>', '<%= subjectObj.title %>')">Delete</button>
            </div>
          </div>
        </div>
      <% }) %>
    </div>

    <!-- Pagination -->
    <nav aria-label="Page navigation example">
      <ul class="pagination justify-content-center">
        <% if (currentPage > 1) { %>
          <li class="page-item">
            <a class="page-link" href="/?page=<%= currentPage - 1 %>">Previous</a>
          </li>
        <% } %>
        <% for (let i = 1; i <= totalPages; i++) { %>
          <li class="page-item <%= (i === currentPage ? 'active' : '') %>">
            <a class="page-link" href="/?page=<%= i %>"><%= i %></a>
          </li>
        <% } %>
        <% if (currentPage < totalPages) { %>
          <li class="page-item">
            <a class="page-link" href="/?page=<%= currentPage + 1 %>">Next</a>
          </li>
        <% } %>
      </ul>
    </nav>
  </div>

  <!-- Prompts List Modal -->
  <div class="modal fade" id="promptsModal" tabindex="-1" aria-labelledby="promptsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="promptsModalLabel">Prompts List</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="row" id="prompts-list">
            <!-- Dynamically loaded prompts will be placed here -->
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newPromptModal">Add Prompt</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modify Prompt Modal -->
  <div class="modal fade" id="modifyPromptModal" tabindex="-1" aria-labelledby="modifyPromptModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modifyPromptModalLabel">Modify Prompt</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="modify-prompt-form">
            <div class="mb-3">
              <label for="prompt-title" class="form-label">Title</label>
              <textarea class="form-control" id="prompt-title" rows="1" placeholder="Title"></textarea>
            </div>
            <div class="mb-3">
              <label for="prompt-text" class="form-label">Prompt</label>
              <textarea class="form-control" id="prompt-text" rows="6" placeholder="SUBJECT" style="height: 640px;"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-danger" onclick="deletePrompt()">Delete</button>
          <button type="button" class="btn btn-primary" onclick="updatePrompt()">Update</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- New Prompt Modal -->
  <div class="modal fade" id="newPromptModal" tabindex="-1" aria-labelledby="newPromptModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="newPromptModalLabel">New Prompt</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="new-prompt-form">
            <div class="mb-3">
              <label for="new-prompt-title" class="form-label">Title</label>
              <textarea class="form-control" id="new-prompt-title" rows="1" placeholder="Title"></textarea>
            </div>
            <div class="mb-3">
              <label for="new-prompt-text" class="form-label">Prompt</label>
              <textarea class="form-control" id="new-prompt-text" rows="6" placeholder="SUBJECT" style="height: 640px;"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" onclick="saveNewPrompt()">Save Prompt</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Report List Modal -->
  <div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="reportModalLabel">Report List</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="row" id="report-list">
            <!-- Dynamically loaded reports will be placed here -->
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newReportModal">Add Report</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modify Report Modal -->
  <div class="modal fade" id="modifyReportModal" tabindex="-1" aria-labelledby="modifyReportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modifyReportModalLabel">Modify Report</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="modify-report-form">
            <div class="mb-3">
              <label for="report-title" class="form-label">Title</label>
              <textarea class="form-control" id="report-title" rows="1" placeholder="Title"></textarea>
            </div>
            <div class="mb-3">
              <label for="report-text" class="form-label">Report</label>
              <textarea class="form-control" id="report-text" rows="6" placeholder="Report" style="height: 640px;"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-danger" onclick="deleteReport()">Delete</button>
          <button type="button" class="btn btn-primary" onclick="updateReport()">Update</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- New Report Modal -->
  <div class="modal fade" id="newReportModal" tabindex="-1" aria-labelledby="newReportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="newReportModalLabel">New Report</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="new-report-form">
            <div class="mb-3">
              <label for="new-report-title" class="form-label">Title</label>
              <textarea class="form-control" id="new-report-title" rows="1" placeholder="Title"></textarea>
            </div>
            <div class="mb-3">
              <label for="new-report-text" class="form-label">Report</label>
              <textarea class="form-control" id="new-report-text" rows="6" placeholder="Report" style="height: 640px;"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" onclick="saveNewReport()">Save Report</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Loading Modal -->
  <div class="modal fade" id="loadingModal" tabindex="-1" aria-labelledby="loadingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-body text-center">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Processing...</span>
          </div>
          <p class="mt-3">Processing, please wait...</p>
        </div>
      </div>
    </div>
  </div>

  <% } else { %>
  <div class="container mt-5">
    <h1 class="text-center mb-5">Please Log In</h1>
    <div class="d-flex justify-content-center">
      <a href="/auth/google" class="btn btn-danger me-3">Login with Google</a>
      <a href="/auth/github" class="btn btn-dark">Login with GitHub</a>
    </div>
  </div>
  <% } %>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function handleFormSubmission(event) {
      event.preventDefault(); // Prevent default form submission

      console.log('Form Submitted');  // Debugging: Ensure this logs when the form is submitted

      const form = document.getElementById('threatModelForm');

      // Log form data to ensure values are captured
      console.log('Subject:', form.subject.value);
      console.log('Model:', form.model.value);
      console.log('API Key:', form.apiKey.value);
      console.log('Selected Prompt ID:', form.selectedPromptId.value);

      // Show the loading modal
      const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'), {
        backdrop: 'static',
        keyboard: false
      });
      loadingModal.show();

      // Delay form submission slightly to allow the modal to display
      setTimeout(() => {
        form.submit();
      }, 500); // 500ms delay
    }

    document.getElementById('search-bar').addEventListener('input', function() {
      const query = this.value;
      if (query.length > 0) {
        fetch(`/search-titles?query=${encodeURIComponent(query)}`)
          .then(response => response.json())
          .then(data => {
            const list = document.getElementById('autocomplete-list');
            list.innerHTML = '';
            data.results.forEach(result => {
              const item = document.createElement('div');
              item.classList.add('autocomplete-suggestion');
              item.innerText = result.title;
              item.addEventListener('click', () => {
                window.location.href = `/results?subjectid=${encodeURIComponent(result.subjectid)}`;
              });
              list.appendChild(item);
            });
          });
      } else {
        document.getElementById('autocomplete-list').innerHTML = '';
      }
    });

    function confirmDelete(subjectid, title) {
      const deleteMessage = `Are you sure you want to delete this Threat Model: "${title}"?`;
      document.getElementById('deleteMessage').innerText = deleteMessage;
      const confirmDeleteButton = document.getElementById('confirmDeleteButton');
      confirmDeleteButton.onclick = () => {
        deleteSubject(subjectid);
        const deleteModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
        deleteModal.hide();
      };
      const deleteModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
      deleteModal.show();
    }

    function deleteSubject(subjectid) {
      fetch('/delete-subjects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ subjectsToDelete: subjectid })
      }).then(() => {
        location.reload();
      });
    }

    function fetchPrompts() {
      fetch('/prompts')
        .then(response => response.json())
        .then(data => {
          const promptsList = document.getElementById('prompts-list');
          promptsList.innerHTML = '';
          data.prompts.forEach(prompt => {
            const card = document.createElement('div');
            card.className = 'col-md-4 mb-4';
            card.innerHTML = `
              <div class="card">
                <div class="card-body">
                  <h5 class="card-title">${prompt.title}</h5>
                  <button class="btn btn-primary" onclick="viewPrompt(${prompt.id})">View</button>
                  <button class="btn btn-secondary" onclick="selectPrompt(${prompt.id}, '${prompt.title}')">Select</button>
                </div>
              </div>
            `;
            promptsList.appendChild(card);
          });
        });
    }

    function viewPrompt(id) {
      fetch(`/prompts/${id}`)
        .then(response => response.json())
        .then(data => {
          document.getElementById('prompt-title').value = data.title;
          document.getElementById('prompt-text').value = data.prompttext;
          document.getElementById('modifyPromptModal').setAttribute('data-prompt-id', id);
          const modifyPromptModal = new bootstrap.Modal(document.getElementById('modifyPromptModal'));
          modifyPromptModal.show();
        });
    }

    function selectPrompt(id, title) {
      // Fill the TM Prompt field with the selected prompt's title
      document.getElementById('tm-prompt').value = title;
      // Store the selected prompt ID
      document.getElementById('selectedPromptId').value = id;
      // Close the modal
      const promptsModal = bootstrap.Modal.getInstance(document.getElementById('promptsModal'));
      promptsModal.hide();
    }

    function updatePrompt() {
      const id = document.getElementById('modifyPromptModal').getAttribute('data-prompt-id');
      const title = document.getElementById('prompt-title').value;
      const prompttext = document.getElementById('prompt-text').value;

      fetch(`/prompts/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ title, prompttext })
      })
      .then(response => {
        if (response.ok) {
          alert('Prompt updated successfully');
          fetchPrompts();
        } else {
          alert('Failed to update prompt');
        }
      });
    }

    function deletePrompt() {
      const id = document.getElementById('modifyPromptModal').getAttribute('data-prompt-id');
      if (confirm('Are you sure you want to delete this prompt?')) {
        fetch(`/prompts/${id}`, {
          method: 'DELETE'
        })
        .then(response => {
          if (response.ok) {
            alert('Prompt deleted successfully');
            fetchPrompts();
          } else {
            alert('Failed to delete prompt');
          }
        });
      }
    }

    function saveNewPrompt() {
      const title = document.getElementById('new-prompt-title').value;
      const prompttext = document.getElementById('new-prompt-text').value;

      fetch('/prompts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ title, prompttext })
      })
      .then(response => {
        if (response.ok) {
          alert('Prompt added successfully');
          fetchPrompts();
        } else {
          alert('Failed to add prompt');
        }
      });
    }

  // Fetch the reports when the modal is displayed
  function fetchReports() {
    fetch('/reports')
      .then(response => response.json())
      .then(data => {
        const reportList = document.getElementById('report-list');
        reportList.innerHTML = '';
        data.reports.forEach(report => {
          const card = document.createElement('div');
          card.className = 'col-md-4 mb-4';
          card.innerHTML = `
            <div class="card">
              <div class="card-body">
                <h5 class="card-title">${report.title}</h5>
                <button class="btn btn-primary" onclick="viewReport(${report.id})">View</button>
                <button class="btn btn-secondary" onclick="selectReport(${report.id}, '${report.title}')">Select</button>
              </div>
            </div>
          `;
          reportList.appendChild(card);
        });
      });
  }

  // Ensure fetchReports() is called when the Report List modal is shown
  document.getElementById('reportModal').addEventListener('show.bs.modal', fetchReports);

    function viewReport(id) {
      fetch(`/reports/${id}`)
        .then(response => response.json())
        .then(data => {
          document.getElementById('report-title').value = data.title;
          document.getElementById('report-text').value = data.reporttext;
          document.getElementById('modifyReportModal').setAttribute('data-report-id', id);
          const modifyReportModal = new bootstrap.Modal(document.getElementById('modifyReportModal'));
          modifyReportModal.show();
        });
    }

    function selectReport(id, title) {
      // Fill the report title field with the selected report's title
      document.getElementById('tm-prompt').value = title;
      // Store the selected report ID (if necessary for further logic)
      // Close the modal
      const reportModal = bootstrap.Modal.getInstance(document.getElementById('reportModal'));
      reportModal.hide();
    }

    function updateReport() {
      const id = document.getElementById('modifyReportModal').getAttribute('data-report-id');
      const title = document.getElementById('report-title').value;
      const reporttext = document.getElementById('report-text').value;

      fetch(`/reports/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ title, reporttext })
      })
      .then(response => {
        if (response.ok) {
          alert('Report updated successfully');
          fetchReports();
        } else {
          alert('Failed to update report');
        }
      });
    }

    function deleteReport() {
      const id = document.getElementById('modifyReportModal').getAttribute('data-report-id');
      if (confirm('Are you sure you want to delete this report?')) {
        fetch(`/reports/${id}`, {
          method: 'DELETE'
        })
        .then(response => {
          if (response.ok) {
            alert('Report deleted successfully');
            fetchReports();
          } else {
            alert('Failed to delete report');
          }
        });
      }
    }

    function saveNewReport() {
      const title = document.getElementById('new-report-title').value;
      const reporttext = document.getElementById('new-report-text').value;

      fetch('/reports', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ title, reporttext })
      })
      .then(response => {
        if (response.ok) {
          alert('Report added successfully');
          fetchReports();
        } else {
          alert('Failed to add report');
        }
      });
    }

    function fetchUsers() {
      fetch('/list-users')
        .then(response => response.json())
        .then(data => {
          const userList = document.getElementById('userList');
          userList.innerHTML = '';

          data.users.forEach(user => {
            const listItem = document.createElement('li');
            listItem.classList.add('list-group-item');
            listItem.textContent = user.name;
            listItem.onclick = () => viewUserDetails(user.email);
            userList.appendChild(listItem);
          });
        })
        .catch(error => console.error('Error fetching users:', error));
    }

    function viewUserDetails(email) {
      fetch(`/get-user?email=${encodeURIComponent(email)}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const user = data.user;
            document.getElementById('userName').value = user.name || '';
            document.getElementById('userEmail').value = user.email || '';
            document.getElementById('userRegistered').checked = user.registered === 'true';
            document.getElementById('userApiKey').value = user.apiKey || '';
            const userDetailsModal = new bootstrap.Modal(document.getElementById('userDetailsModal'));
            userDetailsModal.show();
          } else {
            alert('Failed to fetch user details. Please try again.');
          }
        })
        .catch(error => {
          console.error('Error fetching user details:', error);
          alert('An error occurred while fetching user details.');
        });
    }

    async function deleteUser() {
      const email = document.getElementById('userEmail').value;

      try {
        const response = await fetch(`/delete-user?email=${encodeURIComponent(email)}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          alert('User deleted successfully.');

          // Hide the confirmation deletion modal
          const confirmDeleteUserModal = bootstrap.Modal.getInstance(document.getElementById('confirmDeleteUserModal'));
          confirmDeleteUserModal.hide();

          // Hide the user details modal
          const userDetailsModal = bootstrap.Modal.getInstance(document.getElementById('userDetailsModal'));
          userDetailsModal.hide();

          // Refresh the user list
          fetchUsers();
        } else {
          const errorText = await response.text();
          console.error('Error deleting user:', errorText);
          alert('Error deleting user.');
        }
      } catch (error) {
        console.error('Error deleting user:', error);
        alert('An error occurred while deleting the user.');
      }
    }

    function updateUser() {
      const email = document.getElementById('userEmail').value;
      const name = document.getElementById('userName').value;
      const registered = document.getElementById('userRegistered').checked ? 'true' : 'false';
      const apiKey = document.getElementById('userApiKey').value;

      fetch(`/update-user?email=${encodeURIComponent(email)}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name, registered, apiKey })
      })
      .then(response => {
        if (response.ok) {
          alert('User updated successfully.');

          // Hide the user details modal
          const userDetailsModal = bootstrap.Modal.getInstance(document.getElementById('userDetailsModal'));
          userDetailsModal.hide();

          // Refresh the user list
          fetchUsers();
        } else {
          alert('Error updating user.');
        }
      })
      .catch(error => {
        console.error('Error updating user:', error);
        alert('Error updating user.');
      });
    }

    function confirmDeleteUser() {
      const email = document.getElementById('userEmail').value;
      document.getElementById('confirmDeleteMessage').innerText = `Are you sure you want to delete the user with email: ${email}?`;
      const confirmDeleteUserModal = new bootstrap.Modal(document.getElementById('confirmDeleteUserModal'));
      confirmDeleteUserModal.show();
    }

    function deleteUser() {
      const email = document.getElementById('userEmail').value;

      fetch(`/delete-user?email=${encodeURIComponent(email)}`, {
        method: 'DELETE'
      })
      .then(response => {
        if (response.ok) {
          alert('User deleted successfully.');

          // Hide the confirmation deletion modal
          const confirmDeleteUserModal = bootstrap.Modal.getInstance(document.getElementById('confirmDeleteUserModal'));
          confirmDeleteUserModal.hide();

          // Hide the user details modal
          const userDetailsModal = bootstrap.Modal.getInstance(document.getElementById('userDetailsModal'));
          userDetailsModal.hide();

          // Refresh the user list
          fetchUsers();
        } else {
          alert('Error deleting user.');
        }
      })
      .catch(error => {
        console.error('Error deleting user:', error);
        alert('An error occurred while deleting the user.');
      });
    }

    // Initialize event listeners
    document.getElementById('userManagementModal').addEventListener('show.bs.modal', fetchUsers);
    document.getElementById('promptsModal').addEventListener('show.bs.modal', fetchPrompts);
    document.getElementById('reportModal').addEventListener('show.bs.modal', fetchReports);
  </script>
</body>
</html>
