<!DOCTYPE html>
<html>
<head>
  <title>TMG Results</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-markdown/2.10.0/css/bootstrap-markdown.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <style>
    body {
      display: flex;
    }
    .navbar-vertical {
      height: 100vh;
      width: 200px;
      position: fixed;
      top: 0;
      left: 0;
      background-color: #f8f9fa;
      padding-top: 20px;
    }
    .navbar-vertical .nav-link, .navbar-vertical .nav-label {
      font-size: 18px;
      margin-bottom: 10px;
    }
    .navbar-vertical .nav-label {
      font-weight: bold;
      cursor: default;
    }
    .main-content {
      margin-left: 220px; /* Adjust based on the width of the navbar */
      padding: 20px;
      width: 100%;
    }
    textarea, input[type="text"] {
      width: 100%;
      box-sizing: border-box;
    }
    textarea#subject, textarea#title, textarea#editedResponse {
      height: auto;
    }
    #summaryDialog {
      display: none;
      position: fixed;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      border: 1px solid #ccc;
      padding: 20px;
      background: white;
      z-index: 1000;
      width: 640px;
    }
    #summaryDialog textarea {
      width: 100%;
      height: 840px; /* Set initial height to 840px */
      min-height: 750px; /* Ensure minimum height is 750px */
      max-height: 6000px; /* Set maximum height to 6000px */
      resize: vertical;
      overflow-y: scroll; /* Make it scrollable */
    }
    #loadingIndicator, #loadingIndicatorTM {
      display: none;
      position: fixed;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      padding: 20px;
      background: white;
      border: 1px solid #ccc;
      z-index: 1000;
    }
    .threat-content {
      white-space: pre-wrap;
    }
    .md-editor .md-input {
      height: auto !important; /* Ensure height adjusts automatically */
      max-height: 6000px; /* Set max height for the editor */
      overflow-y: auto; /* Allow vertical scrolling */
    }
    .md-editor .md-preview { /* Hide the preview button */
      display: none !important;
    }
    .threat-markdown {
      height: 400px !important; /* Set height to 400px */
    }
  </style>
</head>
<body>
  <div class="navbar-vertical">
    <nav class="nav flex-column">
      <a class="nav-link" href="/"><i class="fa fa-home"></i> Home</a>
      <form action="/generate-more" method="post" class="nav-link" onsubmit="showLoadingTM()">
        <input type="hidden" name="subjectid" value="<%= subjectid %>">
        <button type="submit" class="btn btn-link p-0"><i class="fa fa-refresh"></i> Generate TM</button>
      </form>
      <span class="nav-label">Summary</span>
      <button id="newSummaryButton" class="nav-link btn btn-link p-0" onclick="generateSummary('<%= subjectid %>')"><i class="fa fa-file"></i> New Summary</button>
      <% if (summary) { %>
        <button class="nav-link btn btn-link p-0" onclick="viewSummary('<%= subjectid %>')"><i class="fa fa-eye"></i> View Summary</button>
      <% } %>
      <span class="nav-label">Common Wording</span>
      <button class="nav-link btn btn-link p-0" onclick="showRweModal('Add')"><i class="fa fa-plus"></i> New RWE</button>
      <button class="nav-link btn btn-link p-0" onclick="listRwes()"><i class="fa fa-edit"></i> Update RWE</button>
      <button class="nav-link btn btn-link p-0" onclick="applyRwe()"><i class="fa fa-check"></i> Apply RWE</button>
    </nav>
  </div>

  <div class="main-content">
    <form action="/edit" method="post" class="mb-4">
      <input type="hidden" name="subjectid" value="<%= subjectid %>">
      <div class="mb-3">
        <label for="subject" class="form-label">Subject:</label>
        <textarea id="subject" name="subjectText" class="form-control"><%= subjectText %></textarea>
      </div>
      <div class="mb-3">
        <label for="title" class="form-label">Title:</label>
        <textarea id="title" name="title" class="form-control"><%= title %></textarea>
      </div>
      <div class="mb-3">
        <label for="model" class="form-label">Model:</label>
        <input type="text" id="model" name="model" class="form-control" value="<%= model %>" readonly>
      </div>
      <div class="mb-3">
        <label for="editedResponse" class="form-label">Response:</label>
        <textarea name="editedResponse" id="editedResponse" rows="12" class="form-control" style="min-height: 840px;"><%= response %></textarea>
      </div>
      <div class="mb-3 d-flex align-items-center">
        <label for="heightInput" class="form-label me-2">Height:</label>
        <input type="number" id="heightInput" class="form-control me-2" style="width: 80px;" value="840">
        <input type="range" id="heightSlider" class="form-range" min="750" max="6000" value="840">
        <span id="heightValue" class="ms-2">840px</span>
      </div>
      <button type="submit" class="btn btn-primary">Save</button>
      <button type="button" class="btn btn-secondary" onclick="showThreatsModal()">View Threats</button>
    </form>

    <div id="summaryDialog">
      <h2>Report</h2>
      <textarea id="summaryContent" class="form-control"></textarea>
      <br>
      <button class="btn btn-secondary" onclick="closeSummaryDialog()">Close</button>
      <button class="btn btn-primary" onclick="saveSummary('<%= subjectid %>')">Save</button>
    </div>
    <div id="loadingIndicator">
      <p>Generating report, please wait...</p>
    </div>
    <div id="loadingIndicatorTM">
      <p>Generating additional Threat Models, please wait...</p>
    </div>

    <!-- Threats Modal -->
    <div class="modal fade" id="threatsModal" tabindex="-1" aria-labelledby="threatsModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="threatsModalLabel">List of Threats</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <ul id="threatsList" class="list-group"></ul>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-primary" onclick="compareSelectedThreats()">Compare Selected</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Compare Modal -->
    <div class="modal fade" id="compareModal" tabindex="-1" aria-labelledby="compareModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="compareModalLabel">Compare Threats</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div id="compareContent" class="row"></div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Add RWE Modal -->
    <div class="modal fade" id="addRweModal" tabindex="-1" aria-labelledby="addRweModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addRweModalLabel">Add RWE</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="addRweForm">
              <div class="mb-3">
                <label for="addRweThreat" class="form-label">Threat</label>
                <textarea class="form-control" id="addRweThreat" name="threat" required></textarea>
              </div>
              <div class="mb-3">
                <label for="addRweDescription" class="form-label">Description</label>
                <textarea class="form-control" id="addRweDescription" name="description" required></textarea>
              </div>
              <div class="mb-3">
                <label for="addRweReference" class="form-label">Reference</label>
                <textarea class="form-control" id="addRweReference" name="reference" required></textarea>
              </div>
              <button type="submit" class="btn btn-primary">Save</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- List of RWE Modal -->
    <div class="modal fade" id="listRweModal" tabindex="-1" aria-labelledby="listRweModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="listRweModalLabel">List of RWE</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <ul id="rweList" class="list-group"></ul>
          </div>
        </div>
      </div>
    </div>

    <!-- Modify RWE Modal -->
    <div class="modal fade" id="modifyRweModal" tabindex="-1" aria-labelledby="modifyRweModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="modifyRweModalLabel">Modify RWE</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="modifyRweForm">
              <div class="mb-3">
                <label for="modifyRweThreat" class="form-label">Threat</label>
                <textarea class="form-control" id="modifyRweThreat" name="threat" required></textarea>
              </div>
              <div class="mb-3">
                <label for="modifyRweDescription" class="form-label">Description</label>
                <textarea class="form-control" id="modifyRweDescription" name="description" required></textarea>
              </div>
              <div class="mb-3">
                <label for="modifyRweReference" class="form-label">Reference</label>
                <textarea class="form-control" id="modifyRweReference" name="reference" required></textarea>
              </div>
              <button type="button" class="btn btn-danger" onclick="confirmDeleteRwe()">Delete</button>
              <button type="submit" class="btn btn-primary">Update</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <div id="findReplaceDialog" class="modal" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Find and Replace</h5>
            <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close" onclick="closeFindReplaceDialog()">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label for="findText" class="form-label">Find</label>
              <input type="text" id="findText" class="form-control">
            </div>
            <div class="mb-3">
              <label for="replaceText" class="form-label">Replace with</label>
              <input type="text" id="replaceText" class="form-control">
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="closeFindReplaceDialog()">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="executeFindReplace()">Replace</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-markdown/2.10.0/js/bootstrap-markdown.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.0.12/marked.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/js/all.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const textareas = document.querySelectorAll('textarea');
      textareas.forEach(textarea => {
        adjustTextareaHeight(textarea); // Adjust height on page load
        textarea.addEventListener('input', () => adjustTextareaHeight(textarea)); // Adjust height on input
      });

      $('#editedResponse').markdown({
        iconlibrary: 'fa',
        additionalButtons: [
          [{
            name: "groupCustom",
            data: [{
              name: "cmdReformat",
              toggle: true, // this param only take effect if you use btn-group
              title: "Reformat",
              icon: "fa fa-refresh",
              callback: function(e) {
                reformatResponse();
              }
            },
            {
              name: "cmdFindReplace",
              toggle: true, // this param only take effect if you use btn-group
              title: "Find and Replace",
              icon: "fa fa-search",
              callback: function(e) {
                findAndReplace();
              }
            },
            {
              name: "cmdCopy",
              toggle: true, // this param only take effect if you use btn-group
              title: "Copy TM",
              icon: "fa fa-copy",
              callback: function(e) {
                copyToClipboard('editedResponse');
              }
            }]
          }]
        ],
        autofocus: false,
        savable: false,
        hiddenButtons: ['cmdPreview'], // Hides the built-in preview button
        onPreview: function() {
          return false; // Disables the preview functionality
        }
      });

      // Hide the preview button with the magnifying glass icon
      document.querySelectorAll('.btn[data-handler="bootstrap-markdown-cmdPreview"]').forEach(button => {
        button.style.display = 'none';
      });

      const heightInput = document.getElementById('heightInput');
      const heightSlider = document.getElementById('heightSlider');
      const heightValue = document.getElementById('heightValue');
      const editedResponse = document.getElementById('editedResponse');

      // Set initial height
      editedResponse.style.minHeight = '840px';

      heightInput.addEventListener('input', function () {
        const newHeight = parseInt(heightInput.value, 10);
        heightSlider.value = newHeight;
        editedResponse.style.minHeight = `${newHeight}px`;
        heightValue.textContent = `${newHeight}px`;
      });

      heightSlider.addEventListener('input', function () {
        const newHeight = parseInt(heightSlider.value, 10);
        heightInput.value = newHeight;
        editedResponse.style.minHeight = `${newHeight}px`;
        heightValue.textContent = `${newHeight}px`;
      });

      $('#addRweForm').on('submit', function (event) {
        event.preventDefault();
        const threat = $('#addRweThreat').val();
        const description = $('#addRweDescription').val();
        const reference = $('#addRweReference').val();

        $.post('/add-rwe', { threat, description, reference }, function (data) {
          if (data.success) {
            alert('RWE added successfully!');
            $('#addRweModal').modal('hide');
          } else {
            alert('Error adding RWE.');
          }
        });
      });

      $('#modifyRweForm').on('submit', function (event) {
        event.preventDefault();
        const rweid = $('#modifyRweForm').data('rweid');
        const threat = $('#modifyRweThreat').val();
        const description = $('#modifyRweDescription').val();
        const reference = $('#modifyRweReference').val();

        $.post(`/update-rwe/${rweid}`, { threat, description, reference }, function (data) {
          if (data.success) {
            alert('RWE updated successfully!');
            $('#modifyRweModal').modal('hide');
          } else {
            alert('Error updating RWE.');
          }
        });
      });
    });

    function adjustTextareaHeight(textarea) {
      textarea.style.height = 'auto'; // Reset height to auto to calculate the new height correctly
      textarea.style.height = `${Math.min(textarea.scrollHeight, 800)}px`; // Set the height to the scroll height
      if (textarea.scrollHeight > 800) {
        textarea.style.overflowY = 'scroll'; // Enable vertical scrolling if height exceeds 800px
      } else {
        textarea.style.overflowY = 'hidden'; // Disable vertical scrolling if height is less than 800px
      }
    }

    function showSummaryDialog(content = '') {
      const dialog = document.getElementById('summaryDialog');
      const textarea = document.getElementById('summaryContent');
      textarea.value = content;
      adjustTextareaHeight(textarea);
      dialog.style.display = 'block';
    }

    function closeSummaryDialog() {
      const dialog = document.getElementById('summaryDialog');
      dialog.style.display = 'none';
    }

    function saveSummary(subjectid) {
  const textarea = document.getElementById('summaryContent');
  const summary = textarea.value;

  fetch('/save-modified-summary', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ subjectid, summary })
  }).then(response => response.json())
    .then(data => {
      if (data.success) {
        closeSummaryDialog();
        alert('Summary saved successfully!');
      } else {
        alert('Error saving summary');
      }
    });
}

    function generateSummary(subjectid) {
      const loadingIndicator = document.getElementById('loadingIndicator');
      const newSummaryButton = document.getElementById('newSummaryButton');
      loadingIndicator.style.display = 'block';
      newSummaryButton.disabled = true;

      fetch('/generate-summary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ subjectid })
      }).then(response => response.json())
        .then(data => {
          loadingIndicator.style.display = 'none';
          newSummaryButton.disabled = false;
          if (data.success) {
            showSummaryDialog(data.summary);
          } else {
            alert('Error generating summary');
          }
        });
    }

    function viewSummary(subjectid) {
      fetch(`/get-summary?subjectid=${encodeURIComponent(subjectid)}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showSummaryDialog(data.summary);
          } else {
            alert('Error retrieving summary');
          }
        });
    }

    function showLoadingTM() {
      const loadingIndicatorTM = document.getElementById('loadingIndicatorTM');
      loadingIndicatorTM.style.display = 'block';
    }

    async function reformatResponse() {
      try {
        const response = await fetch('/results-format');
        const replacements = await response.json();

        const responseTextarea = document.getElementById('editedResponse');
        let responseContent = responseTextarea.value;

        // Remove any single asterisks
        responseContent = responseContent.replace(/\*/g, '');

        // Apply the replacements
        replacements.forEach(({ pattern, replacement }) => {
          const regex = new RegExp(pattern, 'gmi');
          responseContent = responseContent.replace(regex, replacement);
        });

        // Ensure blank lines are maintained between sections
        responseContent = responseContent.replace(/(\n\n)([A-Za-z].*?):/g, '$1\n$2:');

        responseTextarea.value = responseContent;
        adjustTextareaHeight(responseTextarea);
      } catch (error) {
        console.error('Error fetching format:', error);
      }
    }

    function findAndReplace() {
      const findReplaceDialog = document.getElementById('findReplaceDialog');
      findReplaceDialog.style.display = 'block';
    }

    function closeFindReplaceDialog() {
      const findReplaceDialog = document.getElementById('findReplaceDialog');
      findReplaceDialog.style.display = 'none';
    }

    function executeFindReplace() {
      const findText = document.getElementById('findText').value;
      const replaceText = document.getElementById('replaceText').value;

      if (findText !== '') {
        const responseTextarea = document.getElementById('editedResponse');
        let responseContent = responseTextarea.value;

        const regex = new RegExp(findText, 'g');
        responseContent = responseContent.replace(regex, replaceText);

        responseTextarea.value = responseContent;
        adjustTextareaHeight(responseTextarea);
      }

      closeFindReplaceDialog();
    }

    function showThreatsModal() {
      const responseTextarea = document.getElementById('editedResponse');
      const responseContent = responseTextarea.value;

      const threatsList = document.getElementById('threatsList');
      threatsList.innerHTML = ''; // Clear existing list items

      const threatPattern = /## (.*?)\n/g;
      let match;
      while ((match = threatPattern.exec(responseContent)) !== null) {
        const threatItem = document.createElement('li');
        threatItem.className = 'list-group-item';
        threatItem.innerHTML = `
          <input type="checkbox" class="form-check-input me-1" value="${match.index}-${match[1]}">
          ${match[1]}
        `;
        threatsList.appendChild(threatItem);
      }

      const threatsModal = new bootstrap.Modal(document.getElementById('threatsModal'));
      threatsModal.show();
    }

    function compareSelectedThreats() {
      const selectedThreats = Array.from(document.querySelectorAll('#threatsList input:checked'))
        .map(input => input.value.split('-').map((item, index) => index === 0 ? parseInt(item, 10) : item));

      if (selectedThreats.length !== 2) {
        alert('Please select exactly two threats to compare.');
        return;
      }

      const responseTextarea = document.getElementById('editedResponse');
      const responseContent = responseTextarea.value;

      const compareContent = document.getElementById('compareContent');
      compareContent.innerHTML = ''; // Clear existing compare content

      selectedThreats.forEach((threat, index) => {
        const [position, title] = threat;
        const threatPattern = new RegExp(`## ${title.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\n([\\s\\S]*?)(?=\\n## |$)`);
        const threatMatch = responseContent.substring(position).match(threatPattern);

        if (threatMatch) {
          const threatDetails = document.createElement('div');
          threatDetails.className = 'col-md-6';
          threatDetails.innerHTML = `
            <h5>${title}</h5>
            <textarea class="form-control threat-content threat-markdown" data-position="${position}" data-title="${title}">${threatMatch[1]}</textarea>
          `;
          compareContent.appendChild(threatDetails);
        }
      });

      const compareModal = new bootstrap.Modal(document.getElementById('compareModal'));
      compareModal.show();
      const threatsModalInstance = bootstrap.Modal.getInstance(document.getElementById('threatsModal'));
      if (threatsModalInstance) {
        threatsModalInstance.hide();
      }

      // Initialize markdown editor for each threat textarea
      document.querySelectorAll('.threat-markdown').forEach(textarea => {
        $(textarea).markdown({
          iconlibrary: 'fa',
          additionalButtons: [
            [{
              name: "groupCustom",
              data: [{
                name: "cmdFindReplace",
                toggle: true,
                title: "Find and Replace",
                icon: "fa fa-search",
                callback: function(e) {
                  findAndReplace();
                }
              },
              {
                name: "cmdCopy",
                toggle: true,
                title: "Copy TM",
                icon: "fa fa-copy",
                callback: function(e) {
                  copyToClipboard('editedResponse');
                }
              }]
            }]
          ],
          autofocus: false,
          savable: false,
          hiddenButtons: ['cmdPreview'],
          onPreview: function() {
            return false;
          }
        });

        // Hide the preview button with the magnifying glass icon
        $(textarea).siblings('.md-editor').find('.btn[data-handler="bootstrap-markdown-cmdPreview"]').hide();
      });
    }

    function parseAllThreats(content) {
      const threats = {};
      const threatPattern = /## (.*?)\n([\s\S]*?)(?=\n## |$)/g;
      let match;

      while ((match = threatPattern.exec(content)) !== null) {
        threats[match[1]] = match[2].trim();
      }

      return threats;
    }

    function copyToClipboard(elementId) {
      const textarea = document.getElementById(elementId);
      textarea.select();
      document.execCommand('copy');
      alert('Copied to clipboard!');
    }

    function showRweModal(action) {
      if (action === 'Add') {
        $('#addRweModal').modal('show');
      }
    }

    function listRwes() {
      fetch('/list-rwes')
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const rweList = document.getElementById('rweList');
            rweList.innerHTML = '';

            data.rwes.forEach(rwe => {
              const rweItem = document.createElement('li');
              rweItem.className = 'list-group-item';
              rweItem.innerHTML = `
                <button type="button" class="btn btn-link" onclick="editRwe(${rwe.rweid})">${rwe.threat}</button>
              `;
              rweList.appendChild(rweItem);
            });

            const listRweModal = new bootstrap.Modal(document.getElementById('listRweModal'));
            listRweModal.show();
          } else {
            alert('Error listing RWEs.');
          }
        });
    }

    function editRwe(rweid) {
      fetch(`/get-rwe/${rweid}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            $('#modifyRweForm').data('rweid', rweid);
            $('#modifyRweThreat').val(data.rwe.threat);
            $('#modifyRweDescription').val(data.rwe.description);
            $('#modifyRweReference').val(data.rwe.reference);

            const modifyRweModal = new bootstrap.Modal(document.getElementById('modifyRweModal'));
            modifyRweModal.show();
            const listRweModalInstance = bootstrap.Modal.getInstance(document.getElementById('listRweModal'));
            if (listRweModalInstance) {
              listRweModalInstance.hide();
            }
          } else {
            alert('Error getting RWE.');
          }
        });
    }

    function confirmDeleteRwe() {
      const rweid = $('#modifyRweForm').data('rweid');
      const confirmed = confirm('Are you sure you want to delete this RWE?');
      if (confirmed) {
        fetch(`/delete-rwe/${rweid}`, {
          method: 'DELETE'
        }).then(response => response.json())
          .then(data => {
            if (data.success) {
              alert('RWE deleted successfully!');
              $('#modifyRweModal').modal('hide');
            } else {
              alert('Error deleting RWE.');
            }
          });
      }
    }

    function applyRwe() {
        const responseTextarea = document.getElementById('editedResponse');
        let responseContent = responseTextarea.value;

        fetch('/list-rwes')
            .then(response => response.json())
            .then(data => {
                console.log('Data received from /list-rwes endpoint:', data); // Debugging line

                if (data.success) {
                    console.log('Fetched RWEs:', data.rwes); // Log fetched RWEs

                    data.rwes.forEach(rwe => {
                        console.log('Processing RWE:', rwe); // Log each RWE being processed
                        
                        // Create a pattern to match the specific threat section
                        const threatPattern = new RegExp(`(## Threat: ${rwe.threat.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')} ##)([\\s\\S]*?)(## |$)`, 'g');

                        responseContent = responseContent.replace(threatPattern, (match, p1, p2, p3) => {
                            console.log(`Updating content for threat: ${rwe.threat}`);
                            // Replace the Real-World Example content within the matched threat section
                            const updatedSection = p2.replace(/(\*\*Real-World Example:\*\*[\s\S]*?)(?=## |$)/, `**Real-World Example:**\n${rwe.description}\nReference: ${rwe.reference}\n\n`);
                            return `${p1}${updatedSection}${p3}`;
                        });
                    });

                    console.log('Updated response content:', responseContent); // Log updated response content
                    responseTextarea.value = responseContent;
                    adjustTextareaHeight(responseTextarea);
                } else {
                    console.error('Error in data.success:', data.error);
                    alert('Error applying RWEs.');
                }
            })
            .catch(error => {
                console.error('Error fetching RWEs:', error);
                alert('Error applying RWEs.');
            });
    }

    function adjustTextareaHeight(textarea) {
        textarea.style.height = 'auto'; // Reset height to auto to calculate the new height correctly
        textarea.style.height = `${Math.min(textarea.scrollHeight, 800)}px`; // Set the height to the scroll height
        if (textarea.scrollHeight > 800) {
            textarea.style.overflowY = 'scroll'; // Enable vertical scrolling if height exceeds 800px
        } else {
            textarea.style.overflowY = 'hidden'; // Disable vertical scrolling if height is less than 800px
        }
    }

  </script>
</body>
</html>
