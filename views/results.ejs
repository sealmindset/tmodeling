<!DOCTYPE html>
<html>
<head>
  <title>TMG Results</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    textarea, input[type="text"] {
      width: 640px;
      box-sizing: border-box;
    }
    textarea#newSubject, textarea#title, textarea#editedResponse {
      height: auto;
    }
    #summaryDialog {
      display: none;
      position: fixed;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      border: 1px solid #ccc;
      padding: 20px;
      background: white;
      z-index: 1000;
      width: 640px;
    }
    #summaryDialog textarea {
      width: 100%;
      height: 400px; /* Set initial height to 400px */
      min-height: 400px; /* Ensure minimum height is 400px */
      max-height: 800px; /* Set maximum height to 800px */
      resize: vertical;
      overflow-y: scroll; /* Make it scrollable */
    }
    #loadingIndicator, #loadingIndicatorTM {
      display: none;
      position: fixed;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      padding: 20px;
      background: white;
      border: 1px solid #ccc;
      z-index: 1000;
    }
  </style>
  <script>
    function adjustTextareaHeight(textarea) {
      textarea.style.height = 'auto'; // Reset height to auto to calculate the new height correctly
      textarea.style.height = textarea.scrollHeight + 'px'; // Set the height to the scroll height
    }

    function showSummaryDialog(content = '') {
      const dialog = document.getElementById('summaryDialog');
      const textarea = document.getElementById('summaryContent');
      textarea.value = content;
      adjustTextareaHeight(textarea);
      dialog.style.display = 'block';
    }

    function closeSummaryDialog() {
      const dialog = document.getElementById('summaryDialog');
      dialog.style.display = 'none';
    }

    function saveSummary(subject) {
      const textarea = document.getElementById('summaryContent');
      const summary = textarea.value;

      fetch('/save-summary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ subject, summary })
      }).then(response => response.json())
        .then(data => {
          if (data.success) {
            closeSummaryDialog();
          } else {
            alert('Error saving summary');
          }
        });
    }

    function generateSummary(subject) {
      const loadingIndicator = document.getElementById('loadingIndicator');
      const newSummaryButton = document.getElementById('newSummaryButton');
      loadingIndicator.style.display = 'block';
      newSummaryButton.disabled = true;

      fetch('/generate-summary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ subject })
      }).then(response => response.json())
        .then(data => {
          loadingIndicator.style.display = 'none';
          newSummaryButton.disabled = false;
          if (data.success) {
            showSummaryDialog(data.summary);
          } else {
            alert('Error generating summary');
          }
        });
    }

    function viewSummary(subject) {
      fetch(`/get-summary?subject=${encodeURIComponent(subject)}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showSummaryDialog(data.summary);
          } else {
            alert('Error retrieving summary');
          }
        });
    }

    function showLoadingTM() {
      const loadingIndicatorTM = document.getElementById('loadingIndicatorTM');
      loadingIndicatorTM.style.display = 'block';
    }

    async function reformatResponse() {
      try {
        const response = await fetch('/results-format');
        const replacements = await response.json();

        const responseTextarea = document.getElementById('editedResponse');
        let responseContent = responseTextarea.value;

        // Remove any single asterisks
        responseContent = responseContent.replace(/\*/g, '');

        // Apply the replacements
        replacements.forEach(({ pattern, replacement }) => {
          const regex = new RegExp(pattern, 'gmi');
          responseContent = responseContent.replace(regex, replacement);
        });

        // Ensure blank lines are maintained between sections
        responseContent = responseContent.replace(/(\n\n)([A-Za-z].*?):/g, '$1\n$2:');

        responseTextarea.value = responseContent;
        adjustTextareaHeight(responseTextarea);
      } catch (error) {
        console.error('Error fetching format:', error);
      }
    }

    function findAndReplace() {
      const findReplaceDialog = document.getElementById('findReplaceDialog');
      findReplaceDialog.style.display = 'block';
    }

    function closeFindReplaceDialog() {
      const findReplaceDialog = document.getElementById('findReplaceDialog');
      findReplaceDialog.style.display = 'none';
    }

    function executeFindReplace() {
      const findText = document.getElementById('findText').value;
      const replaceText = document.getElementById('replaceText').value;

      if (findText !== '') {
        const responseTextarea = document.getElementById('editedResponse');
        let responseContent = responseTextarea.value;

        const regex = new RegExp(findText, 'g');
        responseContent = responseContent.replace(regex, replaceText);

        responseTextarea.value = responseContent;
        adjustTextareaHeight(responseTextarea);
      }

      closeFindReplaceDialog();
    }

    document.addEventListener('DOMContentLoaded', function () {
      const textareas = document.querySelectorAll('textarea');
      textareas.forEach(textarea => {
        adjustTextareaHeight(textarea); // Adjust height on page load
        textarea.addEventListener('input', () => adjustTextareaHeight(textarea)); // Adjust height on input
      });
    });
  </script>
</head>
<body>
  <div class="container mt-5">
    <form action="/edit" method="post" class="mb-4">
      <input type="hidden" name="subject" value="<%= subject %>">
      <div class="mb-3">
        <label for="newSubject" class="form-label">Subject:</label>
        <textarea id="newSubject" name="newSubject" class="form-control"><%= subject %></textarea>
      </div>
      <div class="mb-3">
        <label for="title" class="form-label">Title:</label>
        <textarea id="title" name="title" class="form-control"><%= title %></textarea>
      </div>
      <div class="mb-3">
        <label for="editedResponse" class="form-label">Response:</label>
        <textarea name="editedResponse" id="editedResponse" rows="12" class="form-control"><%= response %></textarea>
      </div>
      <button type="submit" class="btn btn-primary">Save</button>
    </form>
    <form action="/generate-more" method="post" class="d-inline" onsubmit="showLoadingTM()">
      <input type="hidden" name="subject" value="<%= subject %>">
      <button type="submit" class="btn btn-secondary">Generate TM</button>
    </form>
    <button id="newSummaryButton" class="btn btn-info" onclick="generateSummary('<%= subject %>')">New Summary</button>
    <button id="reformatButton" class="btn btn-warning" onclick="reformatResponse()">Reformat</button>
    <button id="findReplaceButton" class="btn btn-dark" onclick="findAndReplace()">Find and Replace</button>
    <% if (summary) { %>
      <button class="btn btn-success" onclick="viewSummary('<%= subject %>')">View Summary</button>
    <% } %>
    <button class="btn btn-primary ms-2" onclick="window.location.href='/'">Home</button>

    <div id="summaryDialog">
      <h2>Report</h2>
      <textarea id="summaryContent" class="form-control"></textarea>
      <br>
      <button class="btn btn-secondary" onclick="closeSummaryDialog()">Cancel</button>
      <button class="btn btn-primary" onclick="saveSummary('<%= subject %>')">Save</button>
    </div>
    <div id="loadingIndicator">
      <p>Generating report, please wait...</p>
    </div>
    <div id="loadingIndicatorTM">
      <p>Generating additional Threat Models, please wait...</p>
    </div>

    <!-- Find and Replace Dialog -->
    <div id="findReplaceDialog" class="modal" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Find and Replace</h5>
            <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close" onclick="closeFindReplaceDialog()">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label for="findText" class="form-label">Find</label>
              <input type="text" id="findText" class="form-control">
            </div>
            <div class="mb-3">
              <label for="replaceText" class="form-label">Replace with</label>
              <input type="text" id="replaceText" class="form-control">
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="closeFindReplaceDialog()">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="executeFindReplace()">Replace</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
