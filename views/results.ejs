<!DOCTYPE html> 
<html>
<head>
  <title>TMG Results</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-markdown/2.10.0/css/bootstrap-markdown.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <style>
    body {
      display: flex;
    }
    .navbar-vertical {
      height: 100vh;
      width: 200px;
      position: fixed;
      top: 0;
      left: 0;
      background-color: #f8f9fa;
      padding-top: 20px;
    }
    .navbar-vertical .nav-link, .navbar-vertical .nav-label {
      font-size: 18px;
      margin-bottom: 10px;
    }
    .navbar-vertical .nav-label {
      font-weight: bold;
      cursor: default;
    }
    .main-content {
      margin-left: 220px; /* Adjust based on the width of the navbar */
      padding: 20px;
      width: 100%;
    }
    textarea, input[type="text"] {
      width: 100%;
      box-sizing: border-box;
    }
    textarea#subject, textarea#title, textarea#editedResponse {
      height: auto;
    }

    .modal-dialog {
      max-width: 100%;
      margin: 30px auto; /* Add margin to ensure it doesn't stick to the edges */
    }

    #summaryDialog {
      display: none;
      position: fixed;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      border: 1px solid #ccc;
      padding: 20px;
      background: white;
      z-index: 1000;
      width: 90%; /* Adjust width as needed */
      max-height: 80vh; /* Ensure the dialog doesn't exceed viewport height */
      overflow-y: auto; /* Enable scrolling if content overflows */
    }

    #summaryDialog textarea {
      width: 100%;
      height: 100%;
      min-height: 200px; /* Set a minimum height */
      max-height: 600px; /* Set a maximum height */
      resize: vertical; /* Allow vertical resizing */
      overflow-y: scroll; /* Ensure independent scrolling */
    }

    .modal-content {
      max-height: 80vh; /* Limit the height of the modal content */
      overflow-y: auto; /* Ensure modal content is scrollable */
    }

    .threat-content {
      white-space: pre-wrap;
    }
    .md-editor .md-input {
      height: auto !important; /* Ensure height adjusts automatically */
      max-height: 6000px; /* Set max height for the editor */
      overflow-y: auto; /* Allow vertical scrolling */
    }
    .md-editor .md-preview { /* Hide the preview button */
      display: none !important;
    }
    .threat-markdown {
      height: 400px !important; /* Set height to 400px */
    }
  </style>
</head>
<body>
  <% if (user) { %>
    <div class="navbar-vertical">
      <nav class="nav flex-column">
        <a class="nav-link" href="/"><i class="fa fa-home"></i> Home</a>
        <form action="/generate-more" method="post" class="nav-link" onsubmit="showLoadingModal()">
          <input type="hidden" name="subjectid" value="<%= subjectid %>">
          <button type="submit" class="btn btn-link p-0"><i class="fa fa-refresh"></i> Generate TM</button>
        </form>
        <span class="nav-label">Summary</span>
        <button id="newSummaryButton" class="nav-link btn btn-link p-0" onclick="generateSummary('<%= subjectid %>')"><i class="fa fa-file"></i> New Summary</button>
        <% if (summary) { %>
          <button class="nav-link btn btn-link p-0" onclick="viewSummary('<%= subjectid %>')"><i class="fa fa-eye"></i> View Summary</button>
        <% } %>
        <!-- Add Report Button -->
        <span class="nav-label">Report</span>
        <button class="nav-link btn btn-link p-0" data-bs-toddggle="modal" onclick="fetchReports()"><i class="fa fa-file-text"></i>Report Format</button>
        <span class="nav-label">Common Wording</span>
        <button class="nav-link btn btn-link p-0" onclick="showRweModal('Add')"><i class="fa fa-plus"></i> New RWE</button>
        <button class="nav-link btn btn-link p-0" onclick="listRwes()"><i class="fa fa-edit"></i> Update RWE</button>
        <button class="nav-link btn btn-link p-0" onclick="applyRwe()"><i class="fa fa-check"></i> Apply RWE</button>
      </nav>
    </div>

    <div class="main-content">
      <form action="/edit" method="post" class="mb-4">
        <input type="hidden" name="subjectid" value="<%= subjectid %>">
        <div class="mb-3">
          <label for="subject" class="form-label">Subject:</label>
          <textarea id="subject" name="subjectText" class="form-control"><%= subjectText %></textarea>
        </div>
        <div class="mb-3">
          <label for="title" class="form-label">Title:</label>
          <textarea id="title" name="title" class="form-control"><%= title %></textarea>
        </div>
        <div class="mb-3">
          <label for="model" class="form-label">Model:</label>
          <input type="text" id="model" name="model" class="form-control" value="<%= model %>" readonly>
        </div>
        <div class="mb-3">
          <label for="editedResponse" class="form-label">Response:</label>
          <textarea name="editedResponse" id="editedResponse" rows="12" class="form-control" style="min-height: 840px;"><%= response %></textarea>
        </div>
        <div class="mb-3 d-flex align-items-center">
          <label for="heightInput" class="form-label me-2">Height:</label>
          <input type="number" id="heightInput" class="form-control me-2" style="width: 80px;" value="840">
          <input type="range" id="heightSlider" class="form-range" min="750" max="6000" value="840">
          <span id="heightValue" class="ms-2">840px</span>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" onclick="showThreatsModal()">View Threats</button>
      </form>

      <div id="summaryDialog">
        <h2>Report</h2>
        <textarea id="summaryContent" class="form-control"></textarea>
        <br>
        <button class="btn btn-secondary" onclick="closeSummaryDialog()">Close</button>
        <button class="btn btn-primary" onclick="saveSummary('<%= subjectid %>')">Save</button>
      </div>

<!-- Report List Modal -->
<div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
      <div class="modal-content">
          <div class="modal-header">
              <h5 class="modal-title" id="reportModalLabel">List of Reports</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
              <div id="report-list" class="row"></div> <!-- Ensure this ID matches the one in your JavaScript -->
          </div>
      </div>
  </div>
</div>


      

      <!-- Modify Report Modal -->
      <div class="modal fade" id="modifyReportModal" tabindex="-1" aria-labelledby="modifyReportModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="modifyReportModalLabel">Modify Report</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="mb-3">
                <label for="report-title" class="form-label">Title</label>
                <textarea id="report-title" class="form-control" rows="1"></textarea>
              </div>
              <div class="mb-3">
                <label for="report-text" class="form-label">Report</label>
                <textarea id="report-text" class="form-control" rows="10" style="height: 640px;"></textarea>
              </div>
              <button type="button" class="btn btn-primary" onclick="updateReport()">Update</button>
              <button type="button" class="btn btn-danger" onclick="deleteReport()">Delete</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Loading Modal -->
      <div class="modal fade" id="loadingModal" tabindex="-1" aria-labelledby="loadingModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-body text-center">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Processing...</span>
              </div>
              <p class="mt-3">Processing, please wait...</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Threats Modal -->
      <div class="modal fade" id="threatsModal" tabindex="-1" aria-labelledby="threatsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="threatsModalLabel">List of Threats</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <ul id="threatsList" class="list-group"></ul>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-primary" onclick="compareSelectedThreats()">Compare Selected</button>
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Compare Modal -->
      <div class="modal fade" id="compareModal" tabindex="-1" aria-labelledby="compareModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="compareModalLabel">Compare Threats</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div id="compareContent" class="row"></div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Add RWE Modal -->
      <div class="modal fade" id="addRweModal" tabindex="-1" aria-labelledby="addRweModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="addRweModalLabel">Add RWE</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="addRweForm">
                <div class="mb-3">
                  <label for="addRweThreat" class="form-label">Threat</label>
                  <textarea class="form-control" id="addRweThreat" name="threat" required></textarea>
                </div>
                <div class="mb-3">
                  <label for="addRweDescription" class="form-label">Description</label>
                  <textarea class="form-control" id="addRweDescription" name="description" required></textarea>
                </div>
                <div class="mb-3">
                  <label for="addRweReference" class="form-label">Reference</label>
                  <textarea class="form-control" id="addRweReference" name="reference" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- List of RWE Modal -->
      <div class="modal fade" id="listRweModal" tabindex="-1" aria-labelledby="listRweModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="listRweModalLabel">List of RWE</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <!-- Search bar -->
              <div class="mb-4 position-relative">
                <input type="text" id="rwe-search-bar" class="form-control" placeholder="Search by title...">
                <div id="rwe-autocomplete-list" class="autocomplete-suggestions"></div>
              </div>
              <div id="rweCardContainer" class="row"></div>
              <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center" id="paginationControls"></ul>
              </nav>
            </div>
          </div>
        </div>
      </div>

      <!-- Modify RWE Modal -->
      <div class="modal fade" id="modifyRweModal" tabindex="-1" aria-labelledby="modifyRweModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="modifyRweModalLabel">Modify RWE</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="modifyRweForm">
                <div class="mb-3">
                  <label for="modifyRweThreat" class="form-label">Threat</label>
                  <textarea class="form-control" id="modifyRweThreat" name="threat" required></textarea>
                </div>
                <div class="mb-3">
                  <label for="modifyRweDescription" class="form-label">Description</label>
                  <textarea class="form-control" id="modifyRweDescription" name="description" required></textarea>
                </div>
                <div class="mb-3">
                  <label for="modifyRweReference" class="form-label">Reference</label>
                  <textarea class="form-control" id="modifyRweReference" name="reference" required></textarea>
                </div>
                <button type="button" class="btn btn-danger" onclick="confirmDeleteRwe()">Delete</button>
                <button type="submit" class="btn btn-primary">Update</button>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- Confirm Delete Threat Modal -->
      <div class="modal fade" id="confirmDeleteThreatModal" tabindex="-1" aria-labelledby="confirmDeleteThreatModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="confirmDeleteThreatModalLabel">Confirm Delete Threat</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <p>Are you sure you want to delete the following threat?</p>
              <pre id="threatDetails"></pre>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-danger" onclick="confirmDeleteThreat()">Remove</button>
            </div>
          </div>
        </div>
      </div>

      <div id="findReplaceDialog" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Find and Replace</h5>
              <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close" onclick="closeFindReplaceDialog()">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="mb-3">
                <label for="findText" class="form-label">Find</label>
                <input type="text" id="findText" class="form-control">
              </div>
              <div class="mb-3">
                <label for="replaceText" class="form-label">Replace with</label>
                <input type="text" id="replaceText" class="form-control">
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="closeFindReplaceDialog()">Cancel</button>
              <button type="button" class="btn btn-primary" onclick="executeFindReplace()">Replace</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  <% } else { %>
    <div class="main-content text-center">
      <h1 class="mb-4">Please log in to view this page</h1>
      <a href="/auth/google" class="btn btn-danger me-3">Login with Google</a>
      <a href="/auth/github" class="btn btn-dark">Login with GitHub</a>
    </div>
  <% } %>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-markdown/2.10.0/js/bootstrap-markdown.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.0.12/marked.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/js/all.min.js"></script>
  <script>
    let threatToDelete = null;

    document.addEventListener('DOMContentLoaded', function () {
    const textareas = document.querySelectorAll('textarea');
    textareas.forEach(textarea => {
        adjustTextareaHeight(textarea); // Adjust height on page load
        textarea.addEventListener('input', () => adjustTextareaHeight(textarea)); // Adjust height on input
    });

    $('#editedResponse').markdown({
        iconlibrary: 'fa',
        additionalButtons: [
            [{
                name: "groupCustom",
                data: [{
                    name: "cmdReformat",
                    toggle: true, // this param only takes effect if you use btn-group
                    title: "Reformat",
                    icon: "fa fa-refresh",
                    callback: function(e) {
                        reformatResponse();
                    }
                },
                {
                    name: "cmdFindReplace",
                    toggle: true, // this param only take effect if you use btn-group
                    title: "Find and Replace",
                    icon: "fa fa-search",
                    callback: function(e) {
                        findAndReplace();
                    }
                },
                {
                    name: "cmdCopy",
                    toggle: true, // this param only take effect if you use btn-group
                    title: "Copy TM",
                    icon: "fa fa-copy",
                    callback: function(e) {
                        copyToClipboard('editedResponse');
                    }
                }]
            }]
        ],
        autofocus: false,
        savable: false,
        hiddenButtons: ['cmdPreview'], // Hides the built-in preview button
        onPreview: function() {
            return false; // Disables the preview functionality
        }
    });

    // Hide the preview button with the magnifying glass icon
    document.querySelectorAll('.btn[data-handler="bootstrap-markdown-cmdPreview"]').forEach(button => {
        button.style.display = 'none';
    });

    const heightInput = document.getElementById('heightInput');
    const heightSlider = document.getElementById('heightSlider');
    const heightValue = document.getElementById('heightValue');
    const editedResponse = document.getElementById('editedResponse');

    // Set initial height
    editedResponse.style.minHeight = '840px';

    heightInput.addEventListener('input', function () {
        const newHeight = parseInt(heightInput.value, 10);
        heightSlider.value = newHeight;
        editedResponse.style.minHeight = `${newHeight}px`;
        heightValue.textContent = `${newHeight}px`;
    });

    heightSlider.addEventListener('input', function () {
        const newHeight = parseInt(heightSlider.value, 10);
        heightInput.value = newHeight;
        editedResponse.style.minHeight = `${newHeight}px`;
        heightValue.textContent = `${newHeight}px`;
    });

    $('#addRweForm').on('submit', function (event) {
        event.preventDefault();
        const threat = $('#addRweThreat').val().trim();
        const description = $('#addRweDescription').val().trim();
        const reference = $('#addRweReference').val().trim();

        if (!threat || !description || !reference) {
            alert('All fields are required.');
            return;
        }

        $.post('/add-rwe', { threat, description, reference }, function (data) {
            if (data.success) {
                alert('RWE added successfully!');
                $('#addRweModal').modal('hide');
            } else {
                alert('Error adding RWE.');
            }
        }).fail(function (error) {
            console.error('Error adding RWE:', error);
            alert('Error adding RWE.');
        });
    });

    $('#modifyRweForm').on('submit', function (event) {
        event.preventDefault();
        const rweid = $('#modifyRweForm').data('rweid');
        const threat = $('#modifyRweThreat').val();
        const description = $('#modifyRweDescription').val();
        const reference = $('#modifyRweReference').val();

        $.post(`/update-rwe/${rweid}`, { threat, description, reference }, function (data) {
            if (data.success) {
                alert('RWE updated successfully!');
                $('#modifyRweModal').modal('hide');
            } else {
                alert('Error updating RWE.');
            }
        });
    });

    function handleModalTransition(fromModal, toModal) {
        const fromModalInstance = bootstrap.Modal.getInstance(document.getElementById(fromModal));
        if (fromModalInstance) {
            fromModalInstance.hide();
        }
        
        // Remove all backdrops to clean up before showing the next modal
        document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());

        const toModalElement = document.getElementById(toModal);
        const toModalInstance = bootstrap.Modal.getOrCreateInstance(toModalElement);
        toModalInstance.show();
    }

    // Example: Handle transition from List of RWE to Modify RWE
    window.showModifyRwe = function(rweid) {
        handleModalTransition('listRweModal', 'modifyRweModal');
        // Load the RWE data and populate the modify modal as needed
        $.get(`/get-rwe/${rweid}`, function(data) {
            if (data.success) {
                $('#modifyRweForm').data('rweid', rweid);
                $('#modifyRweThreat').val(data.rwe.threat);
                $('#modifyRweDescription').val(data.rwe.description);
                $('#modifyRweReference').val(data.rwe.reference);
            } else {
                alert('Error fetching RWE data.');
            }
        });
    }

    // Handle global modal events for backdrops
    $('.modal').on('show.bs.modal', function () {
        if (!document.querySelector('.modal-backdrop')) {
            $('<div class="modal-backdrop fade show"></div>').appendTo(document.body);
        }
        $(document.body).addClass('modal-open');
    });

    $('.modal').on('hidden.bs.modal', function () {
        const backdrops = document.querySelectorAll('.modal-backdrop');
        if (backdrops.length > 0) {
            backdrops[backdrops.length - 1].remove();
        }
        if ($('.modal.show').length === 0) {
            $(document.body).removeClass('modal-open');
        }
    });
});

function adjustTextareaHeight(textarea) {
  textarea.style.height = 'auto'; // Reset height to auto to calculate the new height correctly
  textarea.style.height = `${Math.min(textarea.scrollHeight, 800)}px`; // Set the height to the scroll height
  if (textarea.scrollHeight > 800) {
    textarea.style.overflowY = 'scroll'; // Enable vertical scrolling if height exceeds 800px
  } else {
    textarea.style.overflowY = 'hidden'; // Disable vertical scrolling if height is less than 800px
  }
}

function showSummaryDialog(content = '') {
  const dialog = document.getElementById('summaryDialog');
  const textarea = document.getElementById('summaryContent');
  textarea.value = content;
  adjustTextareaHeight(textarea);
  dialog.style.display = 'block';
}

function closeSummaryDialog() {
  const dialog = document.getElementById('summaryDialog');
  dialog.style.display = 'none';
}

function saveSummary(subjectid) {
  const textarea = document.getElementById('summaryContent');
  const summary = textarea.value;

  fetch('/save-modified-summary', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ subjectid, summary })
  }).then(response => response.json())
    .then(data => {
      if (data.success) {
        closeSummaryDialog();
        alert('Summary saved successfully!');
      } else {
        alert('Error saving summary');
      }
    });
}

function generateSummary(subjectid) {
  const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'), {
    backdrop: 'static',
    keyboard: false
  });
  loadingModal.show();

  fetch('/generate-summary', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ subjectid })
  }).then(response => response.json())
    .then(data => {
      loadingModal.hide();
      if (data.success) {
        showSummaryDialog(data.summary);
      } else {
        alert('Error generating summary');
      }
    });
}

function viewSummary(subjectid) {
  fetch(`/get-summary?subjectid=${encodeURIComponent(subjectid)}`)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showSummaryDialog(data.summary);
      } else {
        alert('Error retrieving summary');
      }
    });
}

function showLoadingModal() {
  const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'), {
    backdrop: 'static',
    keyboard: false
  });
  loadingModal.show();
}

async function reformatResponse() {
  try {
    const response = await fetch('/results-format');
    const replacements = await response.json();

    const responseTextarea = document.getElementById('editedResponse');
    let responseContent = responseTextarea.value;

    // Remove any single asterisks
    responseContent = responseContent.replace(/\*/g, '');

    // Apply the replacements
    replacements.forEach(({ pattern, replacement }) => {
      const regex = new RegExp(pattern, 'gmi');
      responseContent = responseContent.replace(regex, replacement);
    });

    // Ensure blank lines are maintained between sections
    responseContent = responseContent.replace(/(\n\n)([A-Za-z].*?):/g, '$1\n$2:');

    responseTextarea.value = responseContent;
    adjustTextareaHeight(responseTextarea);
  } catch (error) {
    console.error('Error fetching format:', error);
  }
}

function findAndReplace() {
  const findReplaceDialog = document.getElementById('findReplaceDialog');
  findReplaceDialog.style.display = 'block';
}

function closeFindReplaceDialog() {
  const findReplaceDialog = document.getElementById('findReplaceDialog');
  findReplaceDialog.style.display = 'none';
}

function executeFindReplace() {
  const findText = document.getElementById('findText').value;
  const replaceText = document.getElementById('replaceText').value;

  if (findText !== '') {
    const responseTextarea = document.getElementById('editedResponse');
    let responseContent = responseTextarea.value;

    const regex = new RegExp(findText, 'g');
    responseContent = responseContent.replace(regex, replaceText);

    responseTextarea.value = responseContent;
    adjustTextareaHeight(responseTextarea);
  }

  closeFindReplaceDialog();
}

function showThreatsModal() {
  const responseTextarea = document.getElementById('editedResponse');
  const responseContent = responseTextarea.value;

  const threatsList = document.getElementById('threatsList');
  threatsList.innerHTML = ''; // Clear existing list items

  const threatPattern = /## (.*?)\n/g;
  let match;
  while ((match = threatPattern.exec(responseContent)) !== null) {
    const threatItem = document.createElement('li');
    threatItem.className = 'list-group-item';
    threatItem.innerHTML = `
      <input type="checkbox" class="form-check-input me-1" value="${match.index}-${match[1]}">
      ${match[1]}
      <button type="button" class="btn btn-danger btn-sm float-end" onclick="showConfirmDeleteModal(${match.index}, '${match[1]}')">Delete</button>
    `;
    threatsList.appendChild(threatItem);
  }

  const threatsModal = new bootstrap.Modal(document.getElementById('threatsModal'));
  threatsModal.show();
}

function showConfirmDeleteModal(position, title) {
  const responseTextarea = document.getElementById('editedResponse');
  const responseContent = responseTextarea.value;
  
  const threatPattern = new RegExp(`## ${title.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\n([\\s\\S]*?)(?=\\n## |$)`);
  const threatMatch = responseContent.substring(position).match(threatPattern);
  
  threatToDelete = {
    position,
    title,
    details: threatMatch ? threatMatch[0] : ''
  };

  document.getElementById('threatDetails').textContent = threatToDelete.details;
  const confirmDeleteThreatModal = new bootstrap.Modal(document.getElementById('confirmDeleteThreatModal'));
  confirmDeleteThreatModal.show();
}

function confirmDeleteThreat() {
  if (threatToDelete) {
    const responseTextarea = document.getElementById('editedResponse');
    let responseContent = responseTextarea.value;
    responseContent = responseContent.replace(threatToDelete.details, '');
    responseTextarea.value = responseContent;
    adjustTextareaHeight(responseTextarea);

    saveContent(); // Call the save function after deletion

    const confirmDeleteThreatModal = bootstrap.Modal.getInstance(document.getElementById('confirmDeleteThreatModal'));
    confirmDeleteThreatModal.hide();
    threatToDelete = null;
  }
}

function saveContent() {
  const subjectid = document.querySelector('input[name="subjectid"]').value;
  const editedResponse = document.getElementById('editedResponse').value;
  const subjectText = document.getElementById('subject').value;
  const title = document.getElementById('title').value;

  fetch('/edit', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      subjectid,
      subjectText,
      editedResponse,
      title
    })
  }).then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('Content saved successfully!');
      } else {
        alert('Error saving content');
      }
    });
}

function compareSelectedThreats() {
  const selectedThreats = Array.from(document.querySelectorAll('#threatsList input:checked'))
    .map(input => input.value.split('-').map((item, index) => index === 0 ? parseInt(item, 10) : item));

  if (selectedThreats.length !== 2) {
    alert('Please select exactly two threats to compare.');
    return;
  }

  const responseTextarea = document.getElementById('editedResponse');
  const responseContent = responseTextarea.value;

  const compareContent = document.getElementById('compareContent');
  compareContent.innerHTML = ''; // Clear existing compare content

  selectedThreats.forEach((threat, index) => {
    const [position, title] = threat;
    const threatPattern = new RegExp(`## ${title.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\n([\\s\\S]*?)(?=\\n## |$)`);
    const threatMatch = responseContent.substring(position).match(threatPattern);

    if (threatMatch) {
      const threatDetails = document.createElement('div');
      threatDetails.className = 'col-md-6';
      threatDetails.innerHTML = `
        <h5>${title}</h5>
        <textarea class="form-control threat-content threat-markdown" data-position="${position}" data-title="${title}">${threatMatch[1]}</textarea>
      `;
      compareContent.appendChild(threatDetails);
    }
  });

  const compareModal = new bootstrap.Modal(document.getElementById('compareModal'));
  compareModal.show();
  const threatsModalInstance = bootstrap.Modal.getInstance(document.getElementById('threatsModal'));
  if (threatsModalInstance) {
    threatsModalInstance.hide();
  }

  // Initialize markdown editor for each threat textarea
  document.querySelectorAll('.threat-markdown').forEach(textarea => {
    $(textarea).markdown({
      iconlibrary: 'fa',
      additionalButtons: [
        [{
          name: "groupCustom",
          data: [{
            name: "cmdFindReplace",
            toggle: true,
            title: "Find and Replace",
            icon: "fa fa-search",
            callback: function(e) {
              findAndReplace();
            }
          },
          {
            name: "cmdCopy",
            toggle: true,
            title: "Copy TM",
            icon: "fa fa-copy",
            callback: function(e) {
              copyToClipboard('editedResponse');
            }
          }]
        }]
      ],
      autofocus: false,
      savable: false,
      hiddenButtons: ['cmdPreview'],
      onPreview: function() {
        return false;
      }
    });

    // Hide the preview button with the magnifying glass icon
    $(textarea).siblings('.md-editor').find('.btn[data-handler="bootstrap-markdown-cmdPreview"]').hide();
  });
}

function parseAllThreats(content) {
  const threats = {};
  const threatPattern = /## (.*?)\n([\s\S]*?)(?=\n## |$)/g;
  let match;

  while ((match = threatPattern.exec(content)) !== null) {
    threats[match[1]] = match[2].trim();
  }

  return threats;
}

function copyToClipboard(elementId) {
  const textarea = document.getElementById(elementId);
  textarea.select();
  document.execCommand('copy');
  alert('Copied to clipboard!');
}

function showRweModal(action) {
  if (action === 'Add') {
    $('#addRweModal').modal('show');
  }
}

function debounceThrottle(func, wait, throttleLimit) {
    let timeout, lastCall = 0;

    return function(...args) {
        const context = this;
        const now = new Date().getTime();

        // If it's been longer than the throttle limit, invoke the function
        if (now - lastCall >= throttleLimit) {
            clearTimeout(timeout);
            func.apply(context, args);
            lastCall = now;
        } else {
            // Otherwise, debounce the function
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                func.apply(context, args);
                lastCall = now;
            }, wait);
        }
    };
}

// Applying the combined debounce and throttle to the search input
document.getElementById('rwe-search-bar').addEventListener('input', debounceThrottle(function() {
    const query = this.value;
    listRwes(1, query); // Call the search function
}, 10000, 10000)); // 300ms debounce delay, 1000ms throttle limit

function listRwes(page = 1, query = '') {
  const searchUrl = query.length > 0 
    ? `/search-rwes?query=${encodeURIComponent(query)}&page=${page}` 
    : `/list-rwes-paginated?page=${page}`;

  fetch(searchUrl)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        const rweCardContainer = document.getElementById('rweCardContainer');
        rweCardContainer.innerHTML = '';

        data.rwes.forEach(rwe => {
          const rweCard = document.createElement('div');
          rweCard.className = 'col-md-4';
          rweCard.innerHTML = `
            <div class="card mb-4">
              <div class="card-body">
                <h5 class="card-title">${rwe.threat}</h5>
                <p class="card-text">${rwe.description.substring(0, 100)}...</p>
                <button type="button" class="btn btn-primary" onclick="editRwe(${rwe.rweid})">View</button>
                <button type="button" class="btn btn-danger" onclick="confirmDeleteRwe(${rwe.rweid})">Delete</button>
              </div>
            </div>
          `;
          rweCardContainer.appendChild(rweCard);
        });

        const paginationControls = document.getElementById('paginationControls');
        paginationControls.innerHTML = '';

        for (let i = 1; i <= data.totalPages; i++) {
          const pageItem = document.createElement('li');
          pageItem.className = `page-item ${data.currentPage === i ? 'active' : ''}`;
          pageItem.innerHTML = `<button class="page-link" onclick="listRwes(${i}, '${query}')">${i}</button>`;
          paginationControls.appendChild(pageItem);
        }

        const listRweModal = new bootstrap.Modal(document.getElementById('listRweModal'));
        listRweModal.show();
      } else {
        alert('Error listing RWEs.');
      }
    });
}

function editRwe(rweid) {
  fetch(`/get-rwe/${rweid}`)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        $('#modifyRweForm').data('rweid', rweid);
        $('#modifyRweThreat').val(data.rwe.threat);
        $('#modifyRweDescription').val(data.rwe.description);
        $('#modifyRweReference').val(data.rwe.reference);

        const modifyRweModal = new bootstrap.Modal(document.getElementById('modifyRweModal'));
        modifyRweModal.show();
        const listRweModalInstance = bootstrap.Modal.getInstance(document.getElementById('listRweModal'));
        if (listRweModalInstance) {
          listRweModalInstance.hide();
        }
      } else {
        alert('Error getting RWE.');
      }
    });
}

function closeModifyRweModal() {
const modifyRweModal = bootstrap.Modal.getInstance(document.getElementById('modifyRweModal'));
if (modifyRweModal) {
    modifyRweModal.hide();
    // Ensure backdrop is removed
    document.body.classList.remove('modal-open');
    const backdrops = document.querySelectorAll('.modal-backdrop');
    backdrops.forEach(backdrop => backdrop.remove());
}
}

document.getElementById('modifyRweForm').addEventListener('submit', function(event) {
event.preventDefault();
const rweid = $(this).data('rweid'); // Retrieve the rweid stored in the modal
const threat = document.getElementById('modifyRweThreat').value;
const description = document.getElementById('modifyRweDescription').value;
const reference = document.getElementById('modifyRweReference').value;

fetch(`/update-rwe/${rweid}`, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({ threat, description, reference })
})
.then(response => response.json())
.then(data => {
    if (data.success) {
        alert('RWE updated successfully!');
        closeModifyRweModal(); // Close modal on success
    } else {
        alert('Error updating RWE.');
    }
})
.catch(error => {
    console.error('Error updating RWE:', error);
    alert('Error updating RWE.');
});
});

function refreshRweList() {
// Re-fetch the list of RWEs to refresh the UI
listRwes();
}

function confirmDeleteRwe() {
const rweid = $('#modifyRweForm').data('rweid');
console.log('Attempting to delete RWE with id:', rweid);

fetch(`/delete-rwe/${rweid}`, {
    method: 'DELETE',
    headers: {
        'Content-Type': 'application/json'
    }
})
.then(response => response.json())
.then(data => {
    console.log('Delete response:', data);
    if (data.success) {
        alert('RWE deleted successfully!');
        closeModifyRweModal();
        listRwes(); // Refresh the RWE list to show changes
    } else {
        alert('Error deleting RWE: ' + data.error);
    }
})
.catch(error => {
    console.error('Error deleting RWE:', error);
    alert('Error deleting RWE.');
});
}

function closeModifyRweModal() {
const modifyRweModal = bootstrap.Modal.getInstance(document.getElementById('modifyRweModal'));
if (modifyRweModal) {
    modifyRweModal.hide();
}
document.body.classList.remove('modal-open');
const backdrops = document.querySelectorAll('.modal-backdrop');
backdrops.forEach(backdrop => backdrop.remove());
}

// General function to close any modal by ID
function closeModal(modalId) {
const modalElement = document.getElementById(modalId);
if (modalElement) {
    const modalInstance = bootstrap.Modal.getOrCreateInstance(modalElement);
    modalInstance.hide();

    // Ensure the modal and background are completely reset
    document.body.classList.remove('modal-open');
    const backdrops = document.querySelectorAll('.modal-backdrop');
    backdrops.forEach(backdrop => backdrop.remove());
}
}

// Example usage:
function closeModifyRweModal() {
closeModal('modifyRweModal');
}

function closeListRweModal() {
const listRweModal = bootstrap.Modal.getInstance(document.getElementById('listRweModal'));
if (listRweModal) {
    listRweModal.hide();
}
document.body.classList.remove('modal-open');
const backdrops = document.querySelectorAll('.modal-backdrop');
backdrops.forEach(backdrop => backdrop.remove());
}

function debounce(func, delay) {
let timeout;
return function(...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), delay);
};
}

function applyRwe() {
  const responseTextarea = document.getElementById('editedResponse');
  let responseContent = responseTextarea.value;

  fetch('/list-rwes')
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        data.rwes.forEach(rwe => {
          const threatPattern = new RegExp(`(## Threat: ${rwe.threat.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')} ##)([\\s\\S]*?)(## |$)`, 'g');

          responseContent = responseContent.replace(threatPattern, (match, p1, p2, p3) => {
            const updatedSection = p2.replace(/(\*\*Real-World Example:\*\*[\s\S]*?)(?=\*\*Impact if Exploited:\*\*|$)/, `**Real-World Example:** ${rwe.description} Reference: ${rwe.reference}\n\n`);
            return `${p1}${updatedSection}${p3}`;
          });
        });

        responseTextarea.value = responseContent;
        adjustTextareaHeight(responseTextarea);
      } else {
        alert('Error applying RWEs.');
      }
    })
    .catch(error => {
      console.error('Error fetching RWEs:', error);
      alert('Error applying RWEs.');
    });
}

function fetchReports() {
    fetch('/list-reports')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const reportList = document.getElementById('report-list');
                reportList.innerHTML = ''; // Clear existing content

                data.reports.forEach(report => {
                    const reportCard = document.createElement('div');
                    reportCard.className = 'col-md-4';
                    reportCard.innerHTML = `
                        <div class="card mb-4">
                            <div class="card-body">
                                <h5 class="card-title">${report.reporttitle}</h5>
                                <button type="button" class="btn btn-primary" onclick="viewReport('${report.reportsid}')">View</button>
                                <button type="button" class="btn btn-secondary" onclick="selectReport('${report.reportsid}')">Select</button>
                            </div>
                        </div>
                    `;
                    reportList.appendChild(reportCard);
                });

                const reportModal = new bootstrap.Modal(document.getElementById('reportModal'));
                reportModal.show();
            } else {
                alert('Error listing reports.');
            }
        })
        .catch(error => {
            console.error('Error fetching reports:', error);
            alert('Error fetching reports.');
        });
}


function viewReport(reportsid) {
    fetch(`/get-report/${reportsid}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('report-title').value = data.report.reporttitle;
                document.getElementById('report-text').value = data.report.reporttext;
                document.getElementById('modifyReportModal').setAttribute('data-reportsid', reportsid);

                const modifyReportModal = new bootstrap.Modal(document.getElementById('modifyReportModal'));
                modifyReportModal.show();
            } else {
                alert('Error retrieving report.');
            }
        })
        .catch(error => {
            console.error('Error viewing report:', error);
            alert('Error viewing report.');
        });
}


function updateReport() {
    const reportsid = document.getElementById('modifyReportModal').getAttribute('data-reportsid');
    const reporttitle = document.getElementById('report-title').value;
    const reporttext = document.getElementById('report-text').value;

    fetch(`/update-report/${reportsid}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ reporttitle, reporttext })
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Report updated successfully!');
                const modifyReportModal = bootstrap.Modal.getInstance(document.getElementById('modifyReportModal'));
                modifyReportModal.hide();
            } else {
                alert('Error updating report.');
            }
        })
        .catch(error => {
            console.error('Error updating report:', error);
            alert('Error updating report.');
        });
}

function deleteReport() {
    const reportsid = document.getElementById('modifyReportModal').getAttribute('data-reportsid');

    fetch(`/delete-report/${reportsid}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Report deleted successfully!');
                const modifyReportModal = bootstrap.Modal.getInstance(document.getElementById('modifyReportModal'));
                modifyReportModal.hide();
                fetchReports(); // Refresh report list
            } else {
                alert('Error deleting report.');
            }
        })
        .catch(error => {
            console.error('Error deleting report:', error);
            alert('Error deleting report.');
        });
}

function selectReport(reportsid) {
    fetch(`/get-report/${reportsid}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('title').value = `${data.report.reportsid}: ${data.report.reporttitle}`;
                const reportModal = bootstrap.Modal.getInstance(document.getElementById('reportModal'));
                reportModal.hide();
            } else {
                alert('Error retrieving report.');
            }
        })
        .catch(error => {
            console.error('Error selecting report:', error);
            alert('Error selecting report.');
        });
}

</script>
</body>
</html>
