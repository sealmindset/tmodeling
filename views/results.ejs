<!DOCTYPE html>
<html>
<head>
  <title>TMG Results</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-markdown/2.10.0/css/bootstrap-markdown.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <style>
    body {
      display: flex;
    }
    .navbar-vertical {
      height: 100vh;
      width: 200px;
      position: fixed;
      top: 0;
      left: 0;
      background-color: #f8f9fa;
      padding-top: 20px;
    }
    .navbar-vertical .nav-link, .navbar-vertical .nav-label {
      font-size: 18px;
      margin-bottom: 10px;
    }
    .navbar-vertical .nav-label {
      font-weight: bold;
      cursor: default;
    }
    .main-content {
      margin-left: 220px;
      padding: 20px;
      width: 100%;
    }
    textarea, input[type="text"] {
      width: 100%;
      box-sizing: border-box;
    }
    textarea#subject, textarea#title, textarea#editedResponse {
      height: auto;
    }

    .modal-dialog {
      max-width: 100%;
      margin: 30px auto;
    }

    #summaryDialog {
      display: none;
      position: fixed;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      border: 1px solid #ccc;
      padding: 20px;
      background: white;
      z-index: 1000;
      width: 90%;
      max-height: 80vh;
      overflow-y: auto;
    }

    #summaryDialog textarea {
      width: 100%;
      height: 100%;
      min-height: 200px;
      max-height: 600px;
      resize: vertical;
      overflow-y: scroll;
    }

    .modal-content {
      max-height: 80vh;
      overflow-y: auto;
    }

    .threat-content {
      white-space: pre-wrap;
    }
    .md-editor .md-input {
      height: auto !important;
      max-height: 6000px;
      overflow-y: auto;
    }
    .md-editor .md-preview {
      display: none !important;
    }
    .threat-markdown {
      height: 400px !important;
    }
  </style>
</head>
<body>
  <% if (user) { %>
    <div class="navbar-vertical">
      <nav class="nav flex-column">
        <a class="nav-link" href="/"><i class="fa fa-home"></i> Home</a>
        <form action="/generate-more" method="post" class="nav-link" onsubmit="showLoadingModal()">
          <input type="hidden" name="subjectid" value="<%= subjectid %>">
          <button type="submit" class="btn btn-link p-0"><i class="fa fa-refresh"></i>Generate TM</button>
        </form>
        <span class="nav-label">Summary</span>
        <span class="nav-label">Summaries</span>
        <button class="nav-link btn btn-link p-0" data-bs-toggle="modal" data-bs-target="#summariesModal"><i class="fa fa-file-text"></i>Manage Summaries</button>
        <button id="newSummaryButton" class="nav-link btn btn-link p-0" onclick="generateSummary('<%= subjectid %>')"><i class="fa fa-file"></i>New Summary</button>
        <% if (summary) { %>
          <button class="nav-link btn btn-link p-0" onclick="viewSummary('<%= subjectid %>', 'navbar')"><i class="fa fa-eye"></i> View Summary</button>
        <% } %>
        <span class="nav-label">Report</span>
        <button class="nav-link btn btn-link p-0" onclick="fetchReports()"><i class="fa fa-file-text"></i>Report Format</button>
        <span class="nav-label">Common Wording</span>
        <button class="nav-link btn btn-link p-0" onclick="showRweModal('Add')"><i class="fa fa-plus"></i>New RWE</button>
        <button class="nav-link btn btn-link p-0" onclick="listRwes()"><i class="fa fa-edit"></i>Update RWE</button>
        <button class="nav-link btn btn-link p-0" onclick="applyRwe()"><i class="fa fa-check"></i>Apply RWE</button>
      </nav>
    </div>

    <div class="main-content">
      <form action="/edit" method="post" class="mb-4">
        <input type="hidden" name="subjectid" value="<%= subjectid %>">
        <div class="mb-3">
          <label for="subject" class="form-label">Subject:</label>
          <textarea id="subject" name="subjectText" class="form-control"><%= subjectText %></textarea>
        </div>
        <div class="mb-3">
          <label for="title" class="form-label">Title:</label>
          <textarea id="title" name="title" class="form-control"><%= title %></textarea>
        </div>
        <div class="mb-3">
          <label for="model" class="form-label">Model:</label>
          <input type="text" id="model" name="model" class="form-control" value="<%= model %>" readonly>
        </div>
        <div class="mb-3">
          <label for="editedResponse" class="form-label">Response:</label>
          <textarea name="editedResponse" id="editedResponse" rows="12" class="form-control" style="min-height: 840px;"><%= response %></textarea>
        </div>
        <div class="mb-3 d-flex align-items-center">
          <label for="heightInput" class="form-label me-2">Height:</label>
          <input type="number" id="heightInput" class="form-control me-2" style="width: 80px;" value="840">
          <input type="range" id="heightSlider" class="form-range" min="750" max="6000" value="840">
          <span id="heightValue" class="ms-2">840px</span>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" onclick="showThreatsModal()">View Threats</button>
      </form>

      <!-- Summaries List Modal -->
      <div class="modal fade" id="summariesModal" tabindex="-1" aria-labelledby="summariesModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="summariesModalLabel">Summaries List</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="row" id="summaries-list"></div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newSummaryModal">Add Summary</button>
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Modify Summary Modal -->
      <div class="modal fade" id="modifySummaryModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Modify Summary</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="modify-summary-form">
                <div class="mb-3">
                  <label class="form-label">Title</label>
                  <textarea class="form-control" id="summary-title" rows="1" placeholder="Title"></textarea>
                </div>
                <div class="mb-3">
                  <label class="form-label">Summary</label>
                  <textarea class="form-control" id="summary-text" rows="6" placeholder="Summary content"></textarea>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-danger" onclick="deleteSummary()">Delete</button>
              <button type="button" class="btn btn-primary" onclick="updateSummary()">Update</button>
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

      <!-- New Summary Modal -->
      <div class="modal fade" id="newSummaryModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">New Summary</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="new-summary-form">
                <div class="mb-3">
                  <label class="form-label">Title</label>
                  <textarea class="form-control" id="new-summary-title" rows="1" placeholder="Title"></textarea>
                </div>
                <div class="mb-3">
                  <label class="form-label">Summary</label>
                  <textarea class="form-control" id="new-summary-text" rows="6" placeholder="Summary content"></textarea>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-primary" onclick="saveNewSummary()">Save Summary</button>
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

      <div id="summaryDialog">
        <h2>Report</h2>
        <textarea id="summaryContent" class="form-control"></textarea>
        <br>
        <button class="btn btn-secondary" onclick="closeSummaryDialog()">Close</button>
        <button class="btn btn-primary" onclick="saveSummary('<%= subjectid %>')">Save</button>
      </div>

      <!-- Report List Modal -->
      <div class="modal fade" id="reportModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">List of Reports</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div id="report-list" class="row"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Modify Report Modal -->
      <div class="modal fade" id="modifyReportModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Modify Report</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="mb-3">
                <label class="form-label">Title</label>
                <textarea id="report-title" class="form-control" rows="1"></textarea>
              </div>
              <div class="mb-3">
                <label class="form-label">Report</label>
                <textarea id="report-text" class="form-control" rows="10" style="height: 640px;"></textarea>
              </div>
              <button type="button" class="btn btn-primary" onclick="updateReport()">Update</button>
              <button type="button" class="btn btn-danger" onclick="deleteReport()">Delete</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Loading Modal -->
      <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-body text-center">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Processing...</span>
              </div>
              <p class="mt-3">Processing, please wait...</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Threats Modal -->
      <div class="modal fade" id="threatsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">List of Threats</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <ul id="threatsList" class="list-group"></ul>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-primary" onclick="compareSelectedThreats()">Compare Selected</button>
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Compare Modal -->
      <div class="modal fade" id="compareModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Compare Threats</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div id="compareContent" class="row"></div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Add RWE Modal -->
      <div class="modal fade" id="addRweModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Add RWE</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="addRweForm">
                <div class="mb-3">
                  <label class="form-label">Threat</label>
                  <textarea class="form-control" id="addRweThreat" name="threat" required></textarea>
                </div>
                <div class="mb-3">
                  <label class="form-label">Description</label>
                  <textarea class="form-control" id="addRweDescription" name="description" required></textarea>
                </div>
                <div class="mb-3">
                  <label class="form-label">Reference</label>
                  <textarea class="form-control" id="addRweReference" name="reference" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- List of RWE Modal -->
      <div class="modal fade" id="listRweModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">List of RWE</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="mb-4 position-relative">
                <input type="text" id="rwe-search-bar" class="form-control" placeholder="Search by title...">
                <div id="rwe-autocomplete-list" class="autocomplete-suggestions"></div>
              </div>
              <div id="rweCardContainer" class="row"></div>
              <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center" id="paginationControls"></ul>
              </nav>
            </div>
          </div>
        </div>
      </div>

      <!-- Modify RWE Modal -->
      <div class="modal fade" id="modifyRweModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Modify RWE</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="modifyRweForm">
                <div class="mb-3">
                  <label class="form-label">Threat</label>
                  <textarea class="form-control" id="modifyRweThreat" name="threat" required></textarea>
                </div>
                <div class="mb-3">
                  <label class="form-label">Description</label>
                  <textarea class="form-control" id="modifyRweDescription" name="description" required></textarea>
                </div>
                <div class="mb-3">
                  <label class="form-label">Reference</label>
                  <textarea class="form-control" id="modifyRweReference" name="reference" required></textarea>
                </div>
                <button type="button" class="btn btn-danger" onclick="confirmDeleteRwe()">Delete</button>
                <button type="submit" class="btn btn-primary">Update</button>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- Confirm Delete Threat Modal -->
      <div class="modal fade" id="confirmDeleteThreatModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Confirm Delete Threat</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <p>Are you sure you want to delete the following threat?</p>
              <pre id="threatDetails"></pre>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-danger" onclick="confirmDeleteThreat()">Remove</button>
            </div>
          </div>
        </div>
      </div>

      <div id="findReplaceDialog" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Find and Replace</h5>
              <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close" onclick="closeFindReplaceDialog()">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="mb-3">
                <label for="findText" class="form-label">Find</label>
                <input type="text" id="findText" class="form-control">
              </div>
              <div class="mb-3">
                <label for="replaceText" class="form-label">Replace with</label>
                <input type="text" id="replaceText" class="form-control">
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="closeFindReplaceDialog()">Cancel</button>
              <button type="button" class="btn btn-primary" onclick="executeFindReplace()">Replace</button>
            </div>
          </div>
        </div>
      </div>

    </div>
  <% } else { %>
    <div class="main-content text-center">
      <h1 class="mb-4">Please log in to view this page</h1>
      <a href="/auth/google" class="btn btn-danger me-3">Login with Google</a>
      <a href="/auth/github" class="btn btn-dark">Login with GitHub</a>
    </div>
  <% } %>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-markdown/2.10.0/js/bootstrap-markdown.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/14.1.2/marked.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/js/all.min.js"></script>
  <script>
    let threatToDelete = null;
    let selectedSummaryPromptId = null;

    // ---------- Utility Functions ----------
    function showAlert(message) {
      alert(message);
    }

    function closeModal(modalId) {
      const modalElement = document.getElementById(modalId);
      if (modalElement) {
        const modalInstance = bootstrap.Modal.getOrCreateInstance(modalElement);
        modalInstance.hide();
      }
      document.body.classList.remove('modal-open');
      document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());
    }

    function handleModalTransition(fromModal, toModal) {
      const fromModalInstance = bootstrap.Modal.getInstance(document.getElementById(fromModal));
      if (fromModalInstance) {
        fromModalInstance.hide();
      }
      document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());
      const toModalInstance = bootstrap.Modal.getOrCreateInstance(document.getElementById(toModal));
      toModalInstance.show();
    }

    function sendJsonRequest(url, method='GET', body=null) {
      const options = { method, headers: { 'Content-Type': 'application/json' } };
      if (body) options.body = JSON.stringify(body);
      return fetch(url, options).then(res => res.json());
    }

    function adjustTextareaHeight(textarea) {
      textarea.style.height = 'auto'; 
      textarea.style.height = `${Math.min(textarea.scrollHeight, 800)}px`; 
      textarea.style.overflowY = (textarea.scrollHeight > 800) ? 'scroll' : 'hidden';
    }

    function copyToClipboard(elementId) {
      const textarea = document.getElementById(elementId);
      textarea.select();
      document.execCommand('copy');
      showAlert('Copied to clipboard!');
    }

    function updateItem(endpoint, payload, successMessage, errorMessage, afterSuccess) {
      sendJsonRequest(endpoint, 'PUT', payload)
        .then(data => {
          if (data.success) {
            showAlert(successMessage);
            if (afterSuccess) afterSuccess();
          } else {
            showAlert(errorMessage);
          }
        })
        .catch(error => {
          console.error(errorMessage, error);
          showAlert(errorMessage);
        });
    }

    function deleteItem(endpoint, successMessage, errorMessage, afterSuccess) {
      sendJsonRequest(endpoint, 'DELETE')
        .then(data => {
          if (data.success) {
            showAlert(successMessage);
            if (afterSuccess) afterSuccess();
          } else {
            showAlert(errorMessage);
          }
        })
        .catch(error => {
          console.error(errorMessage, error);
          showAlert(errorMessage);
        });
    }

    $(document).ready(function() {
      $('#summariesModal').on('show.bs.modal', function () {
        fetchSummaries();
      });
    });

    document.addEventListener('DOMContentLoaded', function () {
      const textareas = document.querySelectorAll('textarea');
      textareas.forEach(textarea => {
        adjustTextareaHeight(textarea);
        textarea.addEventListener('input', () => adjustTextareaHeight(textarea));
      });

      $('#editedResponse').markdown({
        iconlibrary: 'fa',
        additionalButtons: [[{
          name: "groupCustom",
          data: [{
            name: "cmdReformat",
            title: "Reformat",
            icon: "fa fa-refresh",
            callback: reformatResponse
          },{
            name: "cmdFindReplace",
            title: "Find and Replace",
            icon: "fa fa-search",
            callback: findAndReplace
          },{
            name: "cmdCopy",
            title: "Copy TM",
            icon: "fa fa-copy",
            callback: () => copyToClipboard('editedResponse')
          }]
        }]],
        autofocus: false,
        savable: false,
        hiddenButtons: ['cmdPreview'],
        onPreview: () => false
      });

      document.querySelectorAll('.btn[data-handler="bootstrap-markdown-cmdPreview"]').forEach(button => {
        button.style.display = 'none';
      });

      const heightInput = document.getElementById('heightInput');
      const heightSlider = document.getElementById('heightSlider');
      const heightValue = document.getElementById('heightValue');
      const editedResponse = document.getElementById('editedResponse');

      editedResponse.style.minHeight = '840px';
      heightInput.addEventListener('input', adjustHeight);
      heightSlider.addEventListener('input', adjustHeight);

      function adjustHeight() {
        const newHeight = parseInt(this.value, 10);
        heightInput.value = newHeight;
        heightSlider.value = newHeight;
        editedResponse.style.minHeight = `${newHeight}px`;
        heightValue.textContent = `${newHeight}px`;
      }

      $('#addRweForm').on('submit', function (event) {
        event.preventDefault();
        const threat = $('#addRweThreat').val().trim();
        const description = $('#addRweDescription').val().trim();
        const reference = $('#addRweReference').val().trim();

        if (!threat || !description || !reference) {
          showAlert('All fields are required.');
          return;
        }

        $.post('/add-rwe', { threat, description, reference }, function (data) {
          if (data.success) {
            showAlert('RWE added successfully!');
            closeModal('addRweModal');
          } else {
            showAlert('Error adding RWE.');
          }
        }).fail(function (error) {
          console.error('Error adding RWE:', error);
          showAlert('Error adding RWE.');
        });
      });

      $('#modifyRweForm').on('submit', function (event) {
        event.preventDefault();
        const rweid = $(this).data('rweid');
        const threat = $('#modifyRweThreat').val();
        const description = $('#modifyRweDescription').val();
        const reference = $('#modifyRweReference').val();

        $.post(`/update-rwe/${rweid}`, { threat, description, reference }, function (data) {
          if (data.success) {
            showAlert('RWE updated successfully!');
            closeModal('modifyRweModal');
          } else {
            showAlert('Error updating RWE.');
          }
        });
      });

    });

    // ---------- Summaries Handling ----------
    function fetchSummaries() {
      sendJsonRequest('/summaries')
      .then(data => {
        if (data.summaries) {
          const summariesList = document.getElementById('summaries-list');
          summariesList.innerHTML = '';
          data.summaries.forEach(summary => {
            const card = document.createElement('div');
            card.className = 'col-md-4 mb-4';
            card.innerHTML = `
              <div class="card">
                <div class="card-body">
                  <h5 class="card-title">${summary.title}</h5>
                  <button class="btn btn-primary" onclick="viewSummary(${summary.id}, 'list')">View</button>
                  <button class="btn btn-secondary" onclick="selectSummary(${summary.id}, '${summary.title}')">Select</button>
                </div>
              </div>`;
            summariesList.appendChild(card);
          });
        } else {
          throw new Error("No summaries found in response.");
        }
      })
      .catch(error => {
        console.error('Error fetching summaries:', error);
        showAlert('Failed to load summaries. Please try again later.');
      });
    }

    function viewSummary(id, context) {
      const url = context === 'navbar'
        ? `/get-summary?subjectid=${encodeURIComponent(id)}`
        : `/summaries/${id}`;

      fetch(url)
        .then(response => response.json())
        .then(data => {
          if (context === 'navbar') {
            if (data.success) {
              showSummaryDialog(data.summary);
            } else {
              showAlert(`Error retrieving summary data for ID: ${id}`);
            }
          } else if (context === 'list') {
            if (data.title !== undefined && data.summaryText !== undefined) {
              document.getElementById('summary-title').value = data.title;
              document.getElementById('summary-text').value = data.summaryText;
              document.getElementById('modifySummaryModal').setAttribute('data-summary-id', id);
              const modifySummaryModal = new bootstrap.Modal(document.getElementById('modifySummaryModal'));
              modifySummaryModal.show();
            } else {
              console.error('Invalid response structure:', data);
              showAlert(`Error retrieving summary data for ID: ${id}`);
            }
          }
        })
        .catch(error => {
          console.error('Fetch error:', error);
          showAlert('An error occurred while retrieving the summary.');
        });
    }

    function selectSummary(id, title) {
      selectedSummaryPromptId = id;
      document.getElementById('title').value = title;
      closeModal('summariesModal');
    }

    function updateSummary() {
      const id = document.getElementById('modifySummaryModal').getAttribute('data-summary-id');
      const title = document.getElementById('summary-title').value.trim();
      const summaryText = document.getElementById('summary-text').value.trim();

      if (!title || !summaryText) {
        showAlert('Both title and summary text are required.');
        return;
      }

      sendJsonRequest(`/summaries/${id}`, 'PUT', { title, summaryText })
      .then(data => {
        if (data.success) {
          showAlert('Summary updated successfully');
          closeModal('modifySummaryModal');
          fetchSummaries();
        } else {
          showAlert('Failed to update summary');
        }
      })
      .catch(error => {
        console.error('Error updating summary:', error);
        showAlert(`Error updating summary for ID: ${id}`);
      });
    }

    function deleteSummary() {
      const id = document.getElementById('modifySummaryModal').getAttribute('data-summary-id');
      if (confirm('Are you sure you want to delete this summary?')) {
        sendJsonRequest(`/summaries/${id}`, 'DELETE')
        .then(data => {
          if (data.success) {
            showAlert('Summary deleted successfully');
            closeModal('modifySummaryModal');
            fetchSummaries();
          } else {
            showAlert('Failed to delete summary');
          }
        })
        .catch(error => {
          console.error('Error deleting summary:', error);
          showAlert(`Error deleting summary for ID: ${id}`);
        });
      }
    }

    function saveNewSummary() {
      const title = document.getElementById('new-summary-title').value.trim();
      const summaryText = document.getElementById('new-summary-text').value.trim();

      if (!title || !summaryText) {
        showAlert('Both title and summary text are required.');
        return;
      }

      sendJsonRequest('/summaries', 'POST', { title, summaryText })
      .then(data => {
        if (data.success) {
          showAlert('Summary added successfully');
          fetchSummaries();
          closeModal('newSummaryModal');
          document.getElementById('new-summary-title').value = '';
          document.getElementById('new-summary-text').value = '';
        } else {
          showAlert('Failed to add summary');
        }
      })
      .catch(error => {
        console.error('Error adding new summary:', error);
        showAlert('An error occurred while adding the summary.');
      });
    }

    function showSummaryDialog(content = '') {
      const dialog = document.getElementById('summaryDialog');
      const textarea = document.getElementById('summaryContent');
      textarea.value = content;
      adjustTextareaHeight(textarea);
      dialog.style.display = 'block';
    }

    function closeSummaryDialog() {
      const dialog = document.getElementById('summaryDialog');
      dialog.style.display = 'none';
    }

    function saveSummary(subjectid) {
      const textarea = document.getElementById('summaryContent');
      const summary = textarea.value;

      sendJsonRequest('/save-modified-summary', 'POST', { subjectid, summary })
      .then(data => {
        if (data.success) {
          closeSummaryDialog();
          showAlert('Summary saved successfully!');
        } else {
          showAlert('Error saving summary');
        }
      });
    }

    function generateSummary(subjectid) {
      const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'), { backdrop: 'static', keyboard: false });
      loadingModal.show();

      sendJsonRequest('/generate-summary', 'POST', { subjectid, selectedSummaryPromptId })
      .then(data => {
        loadingModal.hide();
        if (data.success) {
          showSummaryDialog(data.summary);
        } else {
          showAlert('Error generating summary');
        }
      });
    }

    function showLoadingModal() {
      const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'), { backdrop: 'static', keyboard: false });
      loadingModal.show();
    }

    // ---------- Response Reformatting and Find & Replace ----------
    async function reformatResponse() {
      try {
        const replacements = await sendJsonRequest('/results-format');
        const responseTextarea = document.getElementById('editedResponse');
        let responseContent = responseTextarea.value;

        responseContent = responseContent.replace(/\*/g, '');

        replacements.forEach(({ pattern, replacement }) => {
          const regex = new RegExp(pattern, 'gmi');
          responseContent = responseContent.replace(regex, replacement);
        });

        responseContent = responseContent.replace(/(\n\n)([A-Za-z].*?):/g, '$1\n$2:');
        responseTextarea.value = responseContent;
        adjustTextareaHeight(responseTextarea);
      } catch (error) {
        console.error('Error fetching format:', error);
      }
    }

    function findAndReplace() {
      document.getElementById('findReplaceDialog').style.display = 'block';
    }

    function closeFindReplaceDialog() {
      document.getElementById('findReplaceDialog').style.display = 'none';
    }

    function executeFindReplace() {
      const findText = document.getElementById('findText').value;
      const replaceText = document.getElementById('replaceText').value;

      if (findText !== '') {
        const responseTextarea = document.getElementById('editedResponse');
        let responseContent = responseTextarea.value;
        const regex = new RegExp(findText, 'g');
        responseContent = responseContent.replace(regex, replaceText);
        responseTextarea.value = responseContent;
        adjustTextareaHeight(responseTextarea);
      }

      closeFindReplaceDialog();
    }

    // ---------- Threats Handling ----------
    function showThreatsModal() {
      const responseTextarea = document.getElementById('editedResponse');
      const responseContent = responseTextarea.value;

      const threatsList = document.getElementById('threatsList');
      threatsList.innerHTML = '';

      const threatPattern = /## (.*?)\n/g;
      let match;
      while ((match = threatPattern.exec(responseContent)) !== null) {
        const threatItem = document.createElement('li');
        threatItem.className = 'list-group-item';
        threatItem.innerHTML = `
          <input type="checkbox" class="form-check-input me-1" value="${match.index}-${match[1]}">
          ${match[1]}
          <button type="button" class="btn btn-danger btn-sm float-end" onclick="showConfirmDeleteModal(${match.index}, '${match[1]}')">Delete</button>
        `;
        threatsList.appendChild(threatItem);
      }

      const threatsModal = new bootstrap.Modal(document.getElementById('threatsModal'));
      threatsModal.show();
    }

    function showConfirmDeleteModal(position, title) {
      const responseTextarea = document.getElementById('editedResponse');
      const responseContent = responseTextarea.value;
      const threatPattern = new RegExp(`## ${title.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\n([\\s\\S]*?)(?=\\n## |$)`);
      const threatMatch = responseContent.substring(position).match(threatPattern);

      threatToDelete = { position, title, details: threatMatch ? threatMatch[0] : '' };
      document.getElementById('threatDetails').textContent = threatToDelete.details;
      const confirmDeleteThreatModal = new bootstrap.Modal(document.getElementById('confirmDeleteThreatModal'));
      confirmDeleteThreatModal.show();
    }

    function confirmDeleteThreat() {
      if (threatToDelete) {
        const responseTextarea = document.getElementById('editedResponse');
        let responseContent = responseTextarea.value;
        responseContent = responseContent.replace(threatToDelete.details, '');
        responseTextarea.value = responseContent;
        adjustTextareaHeight(responseTextarea);

        saveContent();
        closeModal('confirmDeleteThreatModal');
        threatToDelete = null;
      }
    }

    function saveContent() {
      const subjectid = document.querySelector('input[name="subjectid"]').value;
      const editedResponse = document.getElementById('editedResponse').value;
      const subjectText = document.getElementById('subject').value;
      const title = document.getElementById('title').value;

      sendJsonRequest('/edit', 'POST', { subjectid, subjectText, editedResponse, title })
      .then(data => {
        if (data.success) {
          showAlert('Content saved successfully!');
        } else {
          showAlert('Error saving content');
        }
      });
    }

    function compareSelectedThreats() {
      const selectedThreats = Array.from(document.querySelectorAll('#threatsList input:checked'))
        .map(input => input.value.split('-').map((item, index) => index === 0 ? parseInt(item, 10) : item));

      if (selectedThreats.length !== 2) {
        showAlert('Please select exactly two threats to compare.');
        return;
      }

      const responseTextarea = document.getElementById('editedResponse');
      const responseContent = responseTextarea.value;
      const compareContent = document.getElementById('compareContent');
      compareContent.innerHTML = '';

      selectedThreats.forEach(threat => {
        const [position, title] = threat;
        const threatPattern = new RegExp(`## ${title.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\n([\\s\\S]*?)(?=\\n## |$)`);
        const threatMatch = responseContent.substring(position).match(threatPattern);

        if (threatMatch) {
          const threatDetails = document.createElement('div');
          threatDetails.className = 'col-md-6';
          threatDetails.innerHTML = `
            <h5>${title}</h5>
            <textarea class="form-control threat-content threat-markdown">${threatMatch[1]}</textarea>
          `;
          compareContent.appendChild(threatDetails);
        }
      });

      const compareModal = new bootstrap.Modal(document.getElementById('compareModal'));
      compareModal.show();
      closeModal('threatsModal');
    }

    // ---------- RWE Handling ----------
    function showRweModal(action) {
      if (action === 'Add') {
        const addRweModal = new bootstrap.Modal(document.getElementById('addRweModal'));
        addRweModal.show();
      }
    }

    // Debounce/Throttle example is left as-is, you can refactor if needed
    function debounceThrottle(func, wait, throttleLimit) {
      let timeout, lastCall = 0;
      return function(...args) {
        const context = this;
        const now = new Date().getTime();
        if (now - lastCall >= throttleLimit) {
          clearTimeout(timeout);
          func.apply(context, args);
          lastCall = now;
        } else {
          clearTimeout(timeout);
          timeout = setTimeout(() => {
            func.apply(context, args);
            lastCall = now;
          }, wait);
        }
      };
    }

    document.getElementById('rwe-search-bar').addEventListener('input', debounceThrottle(function() {
      const query = this.value;
      listRwes(1, query);
    }, 10000, 10000));

    function listRwes(page = 1, query = '') {
      const searchUrl = query.length > 0 
        ? `/search-rwes?query=${encodeURIComponent(query)}&page=${page}` 
        : `/list-rwes-paginated?page=${page}`;

      fetch(searchUrl)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const rweCardContainer = document.getElementById('rweCardContainer');
            rweCardContainer.innerHTML = '';
            data.rwes.forEach(rwe => {
              const rweCard = document.createElement('div');
              rweCard.className = 'col-md-4';
              rweCard.innerHTML = `
                <div class="card mb-4">
                  <div class="card-body">
                    <h5 class="card-title">${rwe.threat}</h5>
                    <p class="card-text">${rwe.description.substring(0, 100)}...</p>
                    <button type="button" class="btn btn-primary" onclick="editRwe(${rwe.rweid})">View</button>
                    <button type="button" class="btn btn-danger" onclick="confirmDeleteRwe(${rwe.rweid})">Delete</button>
                  </div>
                </div>`;
              rweCardContainer.appendChild(rweCard);
            });

            const paginationControls = document.getElementById('paginationControls');
            paginationControls.innerHTML = '';

            for (let i = 1; i <= data.totalPages; i++) {
              const pageItem = document.createElement('li');
              pageItem.className = `page-item ${data.currentPage === i ? 'active' : ''}`;
              pageItem.innerHTML = `<button class="page-link" onclick="listRwes(${i}, '${query}')">${i}</button>`;
              paginationControls.appendChild(pageItem);
            }

            const listRweModal = new bootstrap.Modal(document.getElementById('listRweModal'));
            listRweModal.show();
          } else {
            showAlert('Error listing RWEs.');
          }
        });
    }

    function editRwe(rweid) {
      fetch(`/get-rwe/${rweid}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            $('#modifyRweForm').data('rweid', rweid);
            $('#modifyRweThreat').val(data.rwe.threat);
            $('#modifyRweDescription').val(data.rwe.description);
            $('#modifyRweReference').val(data.rwe.reference);
            handleModalTransition('listRweModal', 'modifyRweModal');
          } else {
            showAlert('Error getting RWE.');
          }
        });
    }

    function confirmDeleteRwe() {
      const rweid = $('#modifyRweForm').data('rweid');
      deleteItem(`/delete-rwe/${rweid}`, 'RWE deleted successfully!', 'Error deleting RWE.', () => {
        closeModal('modifyRweModal');
        listRwes();
      });
    }

    function applyRwe() {
      const responseTextarea = document.getElementById('editedResponse');
      let responseContent = responseTextarea.value;

      sendJsonRequest('/list-rwes')
        .then(data => {
          if (data.success) {
            data.rwes.forEach(rwe => {
              const threatPattern = new RegExp(`(## Threat: ${rwe.threat.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')} ##)([\\s\\S]*?)(## |$)`, 'g');
              responseContent = responseContent.replace(threatPattern, (match, p1, p2, p3) => {
                const updatedSection = p2.replace(/(\*\*Real-World Example:\*\*[\s\S]*?)(?=\*\*Impact if Exploited:\*\*|$)/, 
                  `**Real-World Example:** ${rwe.description} Reference: ${rwe.reference}\n\n`);
                return `${p1}${updatedSection}${p3}`;
              });
            });

            responseTextarea.value = responseContent;
            adjustTextareaHeight(responseTextarea);
          } else {
            showAlert('Error applying RWEs.');
          }
        })
        .catch(error => {
          console.error('Error fetching RWEs:', error);
          showAlert('Error applying RWEs.');
        });
    }

    // ---------- Reports Handling ----------
    function fetchReports() {
      sendJsonRequest('/list-reports')
        .then(data => {
          if (data.success) {
            const reportList = document.getElementById('report-list');
            reportList.innerHTML = '';
            data.reports.forEach(report => {
              const reportCard = document.createElement('div');
              reportCard.className = 'col-md-4';
              reportCard.innerHTML = `
                <div class="card mb-4">
                  <div class="card-body">
                    <h5 class="card-title">${report.reporttitle}</h5>
                    <button type="button" class="btn btn-primary" onclick="viewReport('${report.reportsid}')">View</button>
                    <button type="button" class="btn btn-secondary" onclick="selectReport('${report.reportsid}')">Select</button>
                  </div>
                </div>`;
              reportList.appendChild(reportCard);
            });

            const reportModal = new bootstrap.Modal(document.getElementById('reportModal'));
            reportModal.show();
          } else {
            showAlert('Error listing reports.');
          }
        })
        .catch(error => {
          console.error('Error fetching reports:', error);
          showAlert('Error fetching reports.');
        });
    }

    function viewReport(reportsid) {
      sendJsonRequest(`/get-report/${reportsid}`)
        .then(data => {
          if (data.success) {
            document.getElementById('report-title').value = data.report.reporttitle;
            document.getElementById('report-text').value = data.report.reporttext;
            document.getElementById('modifyReportModal').setAttribute('data-reportsid', reportsid);
            const modifyReportModal = new bootstrap.Modal(document.getElementById('modifyReportModal'));
            modifyReportModal.show();
          } else {
            showAlert('Error retrieving report.');
          }
        })
        .catch(error => {
          console.error('Error viewing report:', error);
          showAlert('Error viewing report.');
        });
    }

    function updateReport() {
      const reportsid = document.getElementById('modifyReportModal').getAttribute('data-reportsid');
      const reporttitle = document.getElementById('report-title').value;
      const reporttext = document.getElementById('report-text').value;

      $.post(`/update-report/${reportsid}`, { reporttitle, reporttext }, function(data) {
        if (data.success) {
          showAlert('Report updated successfully!');
          closeModal('modifyReportModal');
        } else {
          showAlert('Error updating report.');
        }
      }).fail(error => {
        console.error('Error updating report:', error);
        showAlert('Error updating report.');
      });
    }

    function deleteReport() {
      const reportsid = document.getElementById('modifyReportModal').getAttribute('data-reportsid');
      deleteItem(`/delete-report/${reportsid}`, 'Report deleted successfully!', 'Error deleting report.', () => {
        closeModal('modifyReportModal');
        fetchReports();
      });
    }

    function selectReport(reportsid) {
      sendJsonRequest(`/get-report/${reportsid}`)
        .then(data => {
          if (data.success) {
            document.getElementById('title').value = `${data.report.reportsid}: ${data.report.reporttitle}`;
            closeModal('reportModal');
          } else {
            showAlert('Error retrieving report.');
          }
        })
        .catch(error => {
          console.error('Error selecting report:', error);
          showAlert('Error selecting report.');
        });
    }

    // Example of modal transition usage
    window.showModifyRwe = function(rweid) {
      handleModalTransition('listRweModal', 'modifyRweModal');
      $.get(`/get-rwe/${rweid}`, function(data) {
        if (data.success) {
          $('#modifyRweForm').data('rweid', rweid);
          $('#modifyRweThreat').val(data.rwe.threat);
          $('#modifyRweDescription').val(data.rwe.description);
          $('#modifyRweReference').val(data.rwe.reference);
        } else {
          showAlert('Error fetching RWE data.');
        }
      });
    }

    function closeModifyRweModal() {
      closeModal('modifyRweModal');
    }

    function closeListRweModal() {
      closeModal('listRweModal');
    }

  </script>
</body>
</html>
